{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://broker-lib/lib/services/common/constants.service.ts","ng://broker-lib/lib/services/common/brokerhttp.service.ts","ng://broker-lib/lib/models/common/wslogerrore.ts","ng://broker-lib/lib/services/log-errori/log-errori.service.ts","ng://broker-lib/lib/models/login/wsToken.ts","ng://broker-lib/lib/services/store/store.service.ts","ng://broker-lib/lib/services/immobili/immobili.service.ts","ng://broker-lib/lib/models/clienti/cliente.ts","ng://broker-lib/lib/models/immobili/immobileDettaglio.ts","ng://broker-lib/lib/models/common/connection.ts","ng://broker-lib/lib/models/immobili/datiCatastaliDettaglio.ts","ng://broker-lib/lib/models/immobili/omiDettaglio.ts","ng://broker-lib/lib/models/immobili/mutuoDettaglio.ts","ng://broker-lib/lib/models/immobili/affittoDettaglio.ts","ng://broker-lib/lib/services/common/session.service.ts","ng://broker-lib/lib/services/common/alert.service.ts","ng://broker-lib/lib/handler/error/error-handler.service.ts","ng://broker-lib/lib/services/clienti/clienti.service.ts","ng://broker-lib/lib/services/dropdown/dropdown.service.ts","ng://broker-lib/lib/services/icone/icone.service.ts","ng://broker-lib/lib/broker-lib.module.ts","ng://broker-lib/lib/services/report/report.service.ts","ng://broker-lib/lib/services/login/login.service.ts","ng://broker-lib/lib/models/report/grafici.ts","ng://broker-lib/lib/models/report/graficiAffittuario.ts","ng://broker-lib/lib/models/report/graficiAndamentoAnnuale.ts","ng://broker-lib/lib/models/report/graficiConcentrazione.ts","ng://broker-lib/lib/models/report/graficiIndicatore.ts","ng://broker-lib/lib/models/report/reportGenerale.ts","ng://broker-lib/lib/models/report/reportGeneraleAttivo.ts","ng://broker-lib/lib/models/report/reportGeneralePassivo.ts","ng://broker-lib/lib/models/report/reportGeneraleOggettoColonna.ts","ng://broker-lib/lib/models/clienti/abilitaAppClienteRequest.ts","ng://broker-lib/lib/models/clienti/bookValue.ts","ng://broker-lib/lib/models/clienti/inserimentoClienteRequest.ts","ng://broker-lib/lib/models/clienti/inserimentoClienteResponse.ts","ng://broker-lib/lib/models/immobili/immobile.ts","ng://broker-lib/lib/models/immobili/cancellazioneImmobileRequest.ts","ng://broker-lib/lib/models/immobili/cointestatarioDettaglio.ts","ng://broker-lib/lib/models/immobili/immobileDettaglioVM.ts","ng://broker-lib/lib/models/immobili/inserimentoImmobileResponse.ts","ng://broker-lib/lib/models/immobili/spesaDettaglio.ts","ng://broker-lib/lib/models/immobili/tassaDettaglio.ts","ng://broker-lib/lib/models/immobili/pianoAmmortamento.ts","ng://broker-lib/lib/models/immobili/annoPianoAmmortamento.ts","ng://broker-lib/lib/models/login/loginRequest.ts","ng://broker-lib/lib/models/login/utente.ts","ng://broker-lib/lib/models/login/cambioPasswordRequest.ts","ng://broker-lib/lib/models/common/errormessage.ts","ng://broker-lib/lib/models/common/ddlitem.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","ConstantsService","baseAppUrl","tokenHeaderKey","pathSeparator","loginServiceName","cambioPasswordServiceName","getImmobiliServiceName","getImmobileServiceName","putImmobileServiceName","delImmobileServiceName","getCatastoServiceName","getPianoAmmortamentoServiceName","getClientiServiceName","putClientiServiceName","abilitaAppClienteServiceName","bookValueServiceName","pianoAmmortamentoServiceName","situazioneGeneraleServiceName","graficiServiceName","pdfReportServiceName","postErroreServiceName","getDropdownServiceName","tipologiaImmobileVilla","tipologiaImmobileCasa","tipologiaImmobileAgricolo","tipologiaImmobileUfficio","tipologiaImmobileAlbergo","tipologiaImmobileOspedale","tipologiaImmobileScuola","tipologiaImmobileMuseo","tipologiaImmobileChiesa","tipologiaImmobileMagazzino","tipologiaImmobileNegozio","tipologiaImmobileSport","tipologiaImmobileGarage","tipologiaImmobileFabbrica","tipologiaImmobileTeatro","tipologiaImmobileBanca","tipologiaImmobilePonte","tipologiaImmobileStazione","tipologiaImmobileCantiere","getDdlEuribor","getDdlAffittuari","getDdlTasse","getDdlOmi","getDdlCategoriaCatastale","Injectable","BrokerHttpService","http","constants","backEnd","httpClientLogin","HttpClient","prototype","get","path","getNoToken","console","log","post","postNoToken","HttpBackend","WsLogErrore","LogErroriService","httpService","postErrore","errorData","generateErrorMessage","errorMessage","logErrore","log_descrerr","msg_testo","log_stacktrace","msg_techdata","WsToken","StoreService","storage","USERKEY","wsToken","clearUserData","clear","setUserData","ws_token","set","val","getUserDataPromise","_this","Storage","ImmobiliService","getImmobili","id_cliente","getImmobile","immobile_id","putImmobile","immobile","delImmobile","cancellazioneRequest","invioDatiCatastali","getPianoAmmortamentoImmobile","ImmobileDettaglio","Connection","DatiCatastaliDettaglio","OmiDettaglio","MutuoDettaglio","AffittoDettaglio","SessionService","storeService","immobiliService","undefined","elencoImmobiliSubject","Subject","elencoImmobiliObs","asObservable","userDataSubject","userDataObservable","userData","connection","cliente","Cliente","immobiliCliente","dati_catastali","spese","omi","mutuo_dettaglio","affitto_dettaglio","tasse","cointestatari","intestazionePagina","paginaPrecedente","setPaginaPrecedente","pagina","getPaginaPrecedente","setIntestazionePagina","intestazione","getIntestazionePagina","setCliente","cliente_id","subscribe","r","Success","Data","elenco_immobili","getUserData","loadUserData","token_value","getCliente","getImmobiliCliente","setImmobileDettaglio","immobileDettaglio","getImmobileDettaglio","clearImmobileDettaglio","setConnection","conn","getConnection","AlertService","alertController","sessionService","router","presentAlert","alertMessage","create","header","message","buttons","_alert","present","presentErrorAlert","presentAlertLogout","text","role","cssClass","handler","blah","navigate","AlertController","Router","ErrorHandlerService","injector","zone","logErroriService","alertService","handleError","error","token","errore","JSON","stringify","log_metodoerr","log_link","log_query","username","Injector","NgZone","ClientiService","getClienti","putCliente","abilitaAppCliente","request","getBookValue","getPianoAmmortamento","mutuo_id","DropdownService","tipologieTasse","codice","descrizione","tipiAffittuario","euribor","tipiOmi","getTipologieTasse","getTipiAffittuari","getEuribor","getTipiOmi","idComuneIstat","getDropdown","Tipoddl","Filtro","Ordina","Componi","PrimoVuoto","PrimoTutti","IconeService","tipologiaVilla","tipologiaCasa","tipologiaAgricolo","tipologiaUfficio","tipologiaAlbergo","tipologiaOspedale","tipologiaScuola","tipologiaMuseo","tipologiaChiesa","tipologiaMagazzino","tipologiaNegozio","tipologiaSport","tipologiaGarage","tipologiaFabbrica","tipologiaTeatro","tipologiaBanca","tipologiaPonte","tipologiaStazione","tipologiaCantiere","getClasseIcona","tipologia","includes","BrokerLibModule","forRoot","ngModule","providers","NgModule","args","declarations","imports","HttpClientModule","IonicStorageModule","exports","ReportService","getSituazioneGenerale","getGrafici","getPdfReport","LoginService","CambioPassword","bodyCambio","Login","Grafici","GraficiAffittuario","GraficiAndamentoAnnuale","GraficiConcentrazione","GraficiIndicatore","ReportGenerale","ReportGeneraleAttivo","ReportGeneralePassivo","ReportGeneraleOggettoColonna","AbilitaAppClienteRequest","BookValue","InserimentoClienteRequest","InserimentoClienteResponse","CancellazioneImmobileRequest","CointestatarioDettaglio","ImmobileDettaglioVM","__","constructor","tslib_1.__extends","InserimentoImmobileResponse","SpesaDettaglio","TassaDettaglio","PianoAmmortamento","AnnoPianoAmmortamento","LoginRequest","Utente","CambioPasswordRequest","ErrorMessage","DdlItem"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ConstantsService {\n    public readonly baseAppUrl: string = 'http://89.31.75.45:443/Spring-JPA-Security';\n    public readonly tokenHeaderKey: string = 'Authorization';\n    public readonly pathSeparator: string = '/';\n\n    public readonly loginServiceName: string = 'login';\n    public readonly cambioPasswordServiceName: string = 'putPassword';\n\n    // immobili\n    public readonly getImmobiliServiceName: string = 'getimmobili';\n    public readonly getImmobileServiceName: string = 'getimmobile';\n    public readonly putImmobileServiceName: string = 'putimmobile';\n    public readonly delImmobileServiceName: string = 'delimmobile';\n    public readonly getCatastoServiceName: string = 'getcatasto';\n    public readonly getPianoAmmortamentoServiceName: string = 'getPiano';\n\n    // clienti\n    public readonly getClientiServiceName: string = 'getclienti';\n    public readonly putClientiServiceName: string = 'putcliente';\n    public readonly abilitaAppClienteServiceName: string = 'appcliente';\n    public readonly bookValueServiceName: string = 'getbookvalue';\n    public readonly pianoAmmortamentoServiceName: string = 'getpiano';\n\n    // report\n    public readonly situazioneGeneraleServiceName: string = 'getsituazione';\n    public readonly graficiServiceName: string = 'getgrafici';\n    public readonly pdfReportServiceName: string = 'getpdfreport';\n\n    public readonly postErroreServiceName: string = 'writeLog';\n    public readonly getDropdownServiceName: string = 'get_dropdown';\n\n    // tipologia icone immobili\n    public readonly tipologiaImmobileVilla: string = 'villa';\n    public readonly tipologiaImmobileCasa: string = 'casa';\n    public readonly tipologiaImmobileAgricolo: string = 'agricolo';\n    public readonly tipologiaImmobileUfficio: string = 'ufficio';\n    public readonly tipologiaImmobileAlbergo: string = 'albergo';\n    public readonly tipologiaImmobileOspedale: string = 'ospedale';\n    public readonly tipologiaImmobileScuola: string = 'scuola';\n    public readonly tipologiaImmobileMuseo: string = 'museo';\n    public readonly tipologiaImmobileChiesa: string = 'chiesa';\n    public readonly tipologiaImmobileMagazzino: string = 'magazzino';\n    public readonly tipologiaImmobileNegozio: string = 'negozio';\n    public readonly tipologiaImmobileSport: string = 'sport';\n    public readonly tipologiaImmobileGarage: string = 'garage';\n    public readonly tipologiaImmobileFabbrica: string = 'fabbrica';\n    public readonly tipologiaImmobileTeatro: string = 'teatro';\n    public readonly tipologiaImmobileBanca: string = 'banca';\n    public readonly tipologiaImmobilePonte: string = 'ponte';\n    public readonly tipologiaImmobileStazione: string = 'stazione';\n    public readonly tipologiaImmobileCantiere: string = 'cantiere';\n\n    // dropdown\n    public readonly getDdlEuribor: string = 'get_ddl_tipo_euribor';\n    public readonly getDdlAffittuari: string = 'get_ddl_tipo_affittuari';\n    public readonly getDdlTasse: string = 'get_ddl_tasse';\n    public readonly getDdlOmi: string = 'get_ddl_omi';\n    public readonly getDdlCategoriaCatastale: string = 'get_ddl_categoria_catastale';\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpBackend } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\n\nimport { Http } from \"../../models/common/http.namespace\";\n\nimport { ConstantsService } from \"./constants.service\";\nimport { SessionService } from './session.service';\n\n\n@Injectable()\nexport class BrokerHttpService {\n\n    private httpClientLogin: HttpClient;\n\n    constructor(\n        private http: HttpClient,\n        private constants: ConstantsService,\n        private backEnd: HttpBackend) {\n        this.httpClientLogin = new HttpClient(this.backEnd);\n    }\n\n    public get(path: string): Observable<Http.HttpResponse> {\n        return this.http.get<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path);\n    }\n\n    public getNoToken(path: string): Observable<Http.HttpResponse> {\n        console.log(\"HttpService get \" + path);\n        return this.httpClientLogin.get<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path);\n    }\n\n    public post(path: string, body: any): Observable<Http.HttpResponse> {\n        return this.http.post<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path, body);\n    }\n\n    public postNoToken(path: string, body: any): Observable<Http.HttpResponse> {\n        console.log(\"HttpService post \" + path);\n        return this.httpClientLogin.post<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path, body);\n    }\n\n}\n","export class WsLogErrore {\n    public token: string;\n    public log_stacktrace: string;\n    public log_descrerr: string;\n    public log_metodoerr: string;\n    public log_link: string;\n    public log_query: string;\n    public username: string;\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { WsLogErrore } from '../../models/common/wslogerrore';\nimport { ErrorMessage } from '../../models/common/errormessage';\n\n/**\n *\n *\n * @export\n * LogErroriService\n */\n@Injectable()\nexport class LogErroriService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per il salvataggio su persistenza di errori\n     *\n     * @param errorData\n     * @param tokenValue\n     * @returns\n     * LogErroriService\n     */\n    public postErrore(errorData: WsLogErrore): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.postErroreServiceName, errorData);\n    }\n\n    public generateErrorMessage(errorMessage: ErrorMessage): WsLogErrore {\n        const logErrore: WsLogErrore = new WsLogErrore();\n\n        logErrore.log_descrerr = errorMessage.msg_testo;\n        logErrore.log_stacktrace = errorMessage.msg_techdata;\n\n        return logErrore;\n    }\n}\n","import { Utente } from './utente';\n\nexport class WsToken {\n    public token_value: string;\n    public tipo_utente: string;\n    public utente: Utente;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Storage } from '@ionic/Storage';\nimport { WsToken } from '../../models/login/wsToken';\n\n@Injectable()\nexport class StoreService {\n\n    private USERKEY = \"user\";\n\n    private wsToken: WsToken;\n\n    constructor(private storage: Storage) {\n        this.wsToken = null;\n    }\n\n    public clearUserData(): void {\n        this.storage.clear();\n        this.wsToken = null;\n    }\n\n    public setUserData(ws_token: WsToken): number {\n        console.log(\"setUserData\");\n        this.wsToken = ws_token;\n        if (ws_token != null) {\n            this.storage.set(this.USERKEY, ws_token).then((val) => {\n                console.log(val);\n            });\n        } else {\n            return -1;\n        }\n        return 1;\n    }\n\n    public getUserDataPromise() {\n        return new Promise(resolve => {\n            if (this.wsToken == null) {\n                // store service prima inizializzaione\n                this.storage.get(this.USERKEY).then((val: WsToken) => {\n                    // recuperato token dal database\n                    console.log(val);\n                    if (val != null) {\n                        resolve(val);\n                    } else {\n                        console.log(\"necessario login\");\n                        this.setUserData(null);\n                        this.wsToken = null;\n                        // devo andare alla pagina del login\n                        resolve(null);\n                    }\n                }\n                );\n            } else {\n                // store service giÃ  inizializzato\n\n                // come al punto precedente servirebbe controllare il token ed eventualmente fare di nuovo il login;\n\n                resolve(this.wsToken);\n            }\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { ImmobileDettaglio } from '../../models/immobili/immobileDettaglio';\nimport { CancellazioneImmobileRequest } from '../../models/immobili/cancellazioneImmobileRequest';\n\n/**\n * Classe che raduna tutti i servizi riconducibili all'entitÃ  immobile\n *\n * @export\n * ImmobiliService\n */\n@Injectable()\nexport class ImmobiliService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per ottenere l'elenco degli immobili appartenenti ad uno specifico cliente\n     *\n     * @param  id_cliente\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'elenco degli immobili\n     */\n    public getImmobili(id_cliente: string): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getImmobiliServiceName\n            + this.constants.pathSeparator\n            + id_cliente);\n        // return this.httpService.get('getimmobili' + '/' + idCliente, tokenValue);\n    }\n\n    /**\n     * Chiamata per ottenere il singolo immobile passando il suo identificativo unico\n     *\n     * @param  immobile_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'oggetto Immobile\n     */\n    public getImmobile(immobile_id: string): Observable<Http.HttpResponse> {\n        // return this.httpService.get(this.constants.getImmobileServiceName + this.constants.pathSeparator + immobile_id, tokenValue);\n        return this.httpService.get(this.constants.getImmobileServiceName\n            + this.constants.pathSeparator\n            + immobile_id);\n    }\n\n    /**\n     * Chiamata per inserire un nuovo immobile\n     *\n     * @param  immobile\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'id dell'immobile appena salvato\n     */\n    public putImmobile(immobile: ImmobileDettaglio): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.putImmobileServiceName, immobile);\n    }\n\n    /**\n     * Chiamata per cancellare un immobile passando il suo identificativo unico\n     *\n     * @param  cancellazioneRequest\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages.\n     */\n    public delImmobile(cancellazioneRequest: CancellazioneImmobileRequest): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.delImmobileServiceName, cancellazioneRequest);\n    }\n\n    /**\n     * Chiamata per attivare il flusso di invio dei dati catastali via mail all'utente proprietario dell'immobile di cui deve \n     * essere passato l'identificativo unico\n     *\n     * @param  immobile_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages.\n     */\n    public invioDatiCatastali(immobile_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getCatastoServiceName + this.constants.pathSeparator + immobile_id);\n    }\n\n    public getPianoAmmortamentoImmobile(immobile_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getPianoAmmortamentoServiceName + this.constants.pathSeparator + immobile_id);\n    }\n}\n","// tslint:disable-next-line: no-namespace\nexport class Cliente {\n    public cliente_id: number;\n    public nome: string;\n    public cognome: string;\n    public email: string;\n    public codice_fiscale: string;\n    public numero_proprieta: number;\n    public book_value: number;\n    public data_aggiornamento: string;\n    public stato_cliente: string;\n}\n","import { CointestatarioDettaglio } from './cointestatarioDettaglio';\nimport { TassaDettaglio } from './tassaDettaglio';\nimport { SpesaDettaglio } from './spesaDettaglio';\nimport { AffittoDettaglio } from './affittoDettaglio';\nimport { MutuoDettaglio } from './mutuoDettaglio';\nimport { DatiCatastaliDettaglio } from './datiCatastaliDettaglio';\nimport { OmiDettaglio } from './omiDettaglio';\nimport { NumberSymbol } from '@angular/common';\n\nexport class ImmobileDettaglio {\n    public proprieta_id: number;\n    public tipologie_catastali_id: number;\n    public codice_tipologia: string;\n    public descrizione_tipologia: string;\n    public data_aggiornamento: string;\n    public valore_acquisto: number;\n    public quota: number;\n    public catastale_cod: string;\n    public comune_zone_cod: string;\n    public indirizzo: string;\n    public civico: string;\n    public citta: string;\n    public cap: string;\n    public provincia: string;\n    public istat_cod: string;\n    public latitudine: string;\n    public longitudine: string;\n    public prima_casa: boolean;\n    public destinazione_uso_id: number;\n    public descrizione_uso: string;\n    public mutuo: boolean;\n    public tasso: string;\n    public affitto: boolean;\n    public detrazione_interessi: boolean;\n    public euribor_id: number;\n    public descrizione_euribor: string;\n    public cointestatari: Array<CointestatarioDettaglio>;\n    public tasse: Array<TassaDettaglio>;\n    public spese: Array<SpesaDettaglio>;\n    public affitto_dettaglio: AffittoDettaglio;\n    public mutuo_dettaglio: MutuoDettaglio;\n    public dati_catastali: DatiCatastaliDettaglio;\n    public omi: OmiDettaglio;\n}","export class Connection {\n    public url: string;\n    public pathseparator: string;\n    public headertokenkey: string;\n}\n","export class DatiCatastaliDettaglio {\n    public proprieta_catasto_id: number;\n    public sezione: string;\n    public foglio: string;\n    public zona: string;\n    public micro_zona: string;\n    public particella: string;\n    public subalterno: string;\n    public categoria: string;\n    public classe: string;\n    public rendita: number;\n    public vani: string;\n    public superficie_interni: number;\n    public superficie_totale: number;\n}","export class OmiDettaglio {\n    public valore_omi: number;\n    public valore_pot: number;\n    public affitto_pot: number;\n    public ammortamento_decadenza: number;\n}\n","export class MutuoDettaglio {\n    public proprieta_mutuo_id: number;\n    public detrazione_interessi: string;\n    public tipo_tasso: string;\n    public euribor_id: number;\n    public descrizione_euribor: string;\n    public spread: number;\n    public rate_id: number;\n    public descrizione_rate: string;\n    public numero_rate: number;\n    public durata: number;\n    public data_inizio: string;\n    public importo_iniziale: number;\n}","export class AffittoDettaglio {\n    public proprieta_affitto_id: number;\n    public tipo_affittuario_id: number;\n    public descrizione_affittuario: string;\n    public spese_condominiali: boolean;\n    public importo_spese_condominiali: number;\n    public cedolare_secca: boolean;\n    public aliquota_cedolare: number;\n    public prima_scadenza_anni: number;\n    public data_inizio: string;\n    public importo_mensile: number;\n}","import { WsToken } from './../../models/login/wsToken';\nimport { Injectable } from '@angular/core';\nimport { StoreService } from '../store/store.service';\nimport { ImmobiliService } from '../immobili/immobili.service';\n\nimport { Cliente } from '../../models/clienti/cliente';\nimport { Immobile } from '../../models/immobili/immobile';\nimport { Subject } from 'rxjs';\nimport { ImmobileDettaglio } from '../../models/immobili/immobileDettaglio';\nimport { Connection } from '../../models/common/connection';\nimport { DatiCatastaliDettaglio } from '../../models/immobili/datiCatastaliDettaglio';\nimport { OmiDettaglio } from '../../models/immobili/omiDettaglio';\nimport { SpesaDettaglio } from '../../models/immobili/spesaDettaglio';\nimport { MutuoDettaglio } from '../../models/immobili/mutuoDettaglio';\nimport { AffittoDettaglio } from '../../models/immobili/affittoDettaglio';\nimport { TassaDettaglio } from '../../models/immobili/tassaDettaglio';\nimport { CointestatarioDettaglio } from '../../models/immobili/cointestatarioDettaglio';\n\n@Injectable()\nexport class SessionService {\n\n    public cliente: Cliente;\n    public immobiliCliente: Array<Immobile>;\n    public immobile: ImmobileDettaglio = undefined;\n    private elencoImmobiliSubject: Subject<boolean> = new Subject<boolean>();\n    public elencoImmobiliObs = this.elencoImmobiliSubject.asObservable();\n    private userData: WsToken;\n\n    private connection: Connection;\n\n    private userDataSubject: Subject<boolean> = new Subject<boolean>();\n    public userDataObservable = this.userDataSubject.asObservable();\n\n    private intestazionePagina: string;\n    private paginaPrecedente: string;\n\n    constructor(\n        private storeService: StoreService,\n        private immobiliService: ImmobiliService\n    ) {\n        this.userData = new WsToken();\n        this.connection = new Connection();\n        this.cliente = new Cliente();\n        this.immobiliCliente = new Array<Immobile>();\n        this.immobile = new ImmobileDettaglio();\n        this.immobile.dati_catastali = new DatiCatastaliDettaglio();\n        this.immobile.spese = new Array<SpesaDettaglio>();\n        this.immobile.omi = new OmiDettaglio();\n        this.immobile.mutuo_dettaglio = new MutuoDettaglio();\n        this.immobile.affitto_dettaglio = new AffittoDettaglio();\n        this.immobile.tasse = new Array<TassaDettaglio>();\n        this.immobile.cointestatari = new Array<CointestatarioDettaglio>();\n        this.intestazionePagina = 'Readvice';\n        this.paginaPrecedente = 'home';\n    }\n\n    public setPaginaPrecedente(pagina: string): void {\n        this.paginaPrecedente = pagina;\n    }\n\n    public getPaginaPrecedente(): string {\n        return this.paginaPrecedente;\n    }\n\n    public setIntestazionePagina(intestazione: string): void {\n        this.intestazionePagina = intestazione;\n    }\n\n    public getIntestazionePagina(): string {\n        return this.intestazionePagina;\n    }\n\n    public setCliente(cliente: Cliente): void {\n        this.cliente = cliente;\n        this.immobiliService.getImmobili(this.cliente.cliente_id + '').subscribe(r => {\n            if (r.Success) {\n                this.immobiliCliente = r.Data.elenco_immobili;\n                console.log('caricati gli immobili del cliente: ' + this.immobiliCliente.length);\n                // sveglia chi Ã¨ in ascolto\n                this.elencoImmobiliSubject.next(true);\n            }\n        });\n    }\n\n    public clearUserData(): void {\n        this.storeService.clearUserData();\n        this.userData = new WsToken();\n    }\n\n    public setUserData(userData: WsToken): number {\n        this.userData = userData;\n        if (userData != null) {\n            this.storeService.setUserData(userData);\n        } else {\n            return -1;\n        }\n        return 1;\n    }\n\n    public getUserData(): WsToken {\n        return this.userData;\n    }\n\n    public loadUserData(): void {\n        if (this.userData !== null && this.userData !== undefined && this.userData.token_value === '') {\n            this.userDataSubject.next(true);\n        } else {\n            this.storeService.getUserDataPromise().then((val: WsToken) => {\n                if (val == null) {\n                    this.userDataSubject.next(false);\n                } else {\n                    this.userData = val;\n                    this.userDataSubject.next(true);\n                }\n            });\n        }\n    }\n\n    public getCliente(): Cliente {\n        return this.cliente;\n    }\n\n    public getImmobiliCliente(): Array<Immobile> {\n        return this.immobiliCliente;\n    }\n\n    public setImmobileDettaglio(immobileDettaglio: ImmobileDettaglio): void {\n        this.immobile = immobileDettaglio;\n    }\n\n    public getImmobileDettaglio(): ImmobileDettaglio {\n        return this.immobile;\n    }\n\n    public clearImmobileDettaglio(): void {\n        this.immobile = null;\n    }\n\n    public setConnection(conn: Connection): void {\n        this.connection = conn;\n    }\n\n    public getConnection(): Connection {\n        return this.connection;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { SessionService } from './session.service';\nimport { Router } from '@angular/router';\n// import { Platform, MenuController, Nav, NavController, AlertController, ToastController } from 'ionic-angular';\n\n\n@Injectable()\nexport class AlertService {\n\n    constructor(private alertController: AlertController,\n        private sessionService: SessionService,\n        public router: Router) {\n    }\n\n    public async presentAlert(alertMessage: string) {\n        const alert = this.alertController.create({\n            header: 'Conferma',\n            message: alertMessage,\n            buttons: ['OK']\n        });\n        alert.then((_alert: any) => {\n            _alert.present();\n        });\n    }\n\n    public async presentErrorAlert(alertMessage: string) {\n        const alert = this.alertController.create({\n            header: 'Errore',\n            message: alertMessage,\n            buttons: ['CHIUDI']\n        });\n        alert.then((_alert: any) => {\n            _alert.present();\n        });\n    }\n\n    public async presentAlertLogout() {\n        const alert = this.alertController.create({\n            header: 'Logout',\n            message: 'Sicuro di voler uscire?',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    role: 'cancel',\n                    cssClass: 'secondary',\n                    handler: (blah) => {\n                        console.log('Confirm Cancel: blah');\n                    }\n                }, {\n                    text: 'Si',\n                    handler: () => {\n                        this.sessionService.clearUserData();\n                        this.router.navigate(['login']);\n                    }\n                }\n            ]\n        });\n        alert.then((_alert: any) => {\n            _alert.present();\n        });\n    }\n\n}\n","import { LogErroriService } from '../../services/log-errori/log-errori.service';\nimport { Injectable, ErrorHandler, Injector, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { WsLogErrore } from '../../models/common/wslogerrore';\nimport { AlertService } from '../../services/common/alert.service';\nimport { SessionService } from '../../services/common/session.service';\n\n@Injectable()\nexport class ErrorHandlerService implements ErrorHandler {\n\n    constructor(\n        private injector: Injector,\n        private zone: NgZone,\n        private logErroriService: LogErroriService,\n        private alertService: AlertService,\n        private sessionService: SessionService) { }\n\n    handleError(error: Error | HttpErrorResponse) {\n        const token = this.sessionService.getUserData().token_value;\n\n        console.log('gestisco un errore');\n        const errore = new WsLogErrore();\n        errore.token = token;\n        errore.log_stacktrace = JSON.stringify(error);\n        errore.log_descrerr = error.message;\n        errore.log_metodoerr = '';\n        errore.log_link = '';\n        errore.log_query = '';\n        errore.username = '';\n        // console.log('trasmetto l\\'errore');\n        this.logErroriService.postErrore(errore).subscribe(r => {\n            console.log('errore trasmesso: ' + errore);\n            this.alertService.presentErrorAlert('Errore ' + error.message + ' trasmesso al server');\n        });\n        console.log('gestione errore completata');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { InserimentoClienteRequest } from '../../models/clienti/inserimentoClienteRequest';\nimport { AbilitaAppClienteRequest } from '../../models/clienti/abilitaAppClienteRequest';\n\n/**\n * Classe che raduna tutti i servizi riconducibili all'entitÃ  cliente\n *\n * @export\n * ClientiService\n */\n@Injectable()\nexport class ClientiService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per ottenere l'elenco dei clienti completo.\n     *\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns contenente l'oggetto Data che a sua volta contiene l'elenco degli oggetti Cliente\n     */\n    public getClienti(): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getClientiServiceName);\n    }\n\n    /**\n     * Chiamata per inserire un nuovo cliente\n     *\n     * @param  cliente\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'id dell'oggetto appena generato\n     */\n    public putCliente(cliente: InserimentoClienteRequest): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.putClientiServiceName, cliente);\n    }\n\n    /**\n     * Chiamata per abilitare l'app di uno specifico cliente\n     *\n     * @param  request oggetto contenente i parametri per l'abilitazione\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages.\n     */\n    public abilitaAppCliente(request: AbilitaAppClienteRequest): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.abilitaAppClienteServiceName, request);\n    }\n\n    /**\n     * Chiamata per ottenere il BookValue di un cliente\n     *\n     * @param  cliente_id identificativo unico del cliente del quale si vuole il BookValue\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data che a sua volta contiene l'elenco degli oggetti BookValue\n     */\n    public getBookValue(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.bookValueServiceName + this.constants.pathSeparator + cliente_id);\n    }\n\n    /**\n     * Chiamata per ottenere il piano di ammortamento di un mutuo\n     *\n     * @param  mutuo_id identificativo unico del mutuo del quale si vuole il PianoAmmortamento\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data che a sua volta contiene l'elenco degli oggetti PianoAmmortamento\n     */\n    public getPianoAmmortamento(mutuo_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.pianoAmmortamentoServiceName + this.constants.pathSeparator + mutuo_id);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { DdlItem } from '../../models/common/ddlitem';\n\n@Injectable()\nexport class DropdownService {\n\n    private tipologieTasse: Array<DdlItem> = [\n        { codice: 0, descrizione: \"\" },\n        { codice: 1, descrizione: \"tasse1\" },\n        { codice: 2, descrizione: \"tasse2\" },\n        { codice: 3, descrizione: \"tasse3\" },\n    ];\n\n    private tipiAffittuario: Array<DdlItem> = [\n        { codice: 0, descrizione: \"\" },\n        { codice: 1, descrizione: \"tipoAffittuario1\" },\n        { codice: 2, descrizione: \"tipoAffittuario2\" },\n        { codice: 3, descrizione: \"tipoAffittuario3\" },\n    ];\n\n    private euribor: Array<DdlItem> = [\n        { codice: 0, descrizione: \"\" },\n        { codice: 1, descrizione: \"euribor1\" },\n        { codice: 2, descrizione: \"euribor2\" },\n        { codice: 3, descrizione: \"euribor3\" },\n    ];\n\n    private tipiOmi: Array<DdlItem> = [\n        { codice: 0, descrizione: \"\" },\n        { codice: 1, descrizione: \"omi1\" },\n        { codice: 2, descrizione: \"omi2\" },\n        { codice: 3, descrizione: \"omi3\" },\n        { codice: 4, descrizione: \"omi4\" },\n        { codice: 5, descrizione: \"omi5\" }\n    ];\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    public getTipologieTasse(): Array<DdlItem> {\n        return this.tipologieTasse;\n    }\n\n    public getTipiAffittuari(): Array<DdlItem> {\n        return this.tipiAffittuario;\n    }\n\n    public getEuribor(): Array<DdlItem> {\n        return this.euribor;\n    }\n\n    public getTipiOmi(idComuneIstat: string): Array<DdlItem> {\n        return this.tipiOmi;\n    }\n\n    public getDropdown(Tipoddl: number, Filtro: string, Ordina: string, Componi: string, PrimoVuoto: string, PrimoTutti: string): Observable<Http.HttpResponse> {\n        const path = '/' + Tipoddl + '/' + Filtro + '/' + Ordina + '/' + Componi + '/' + PrimoVuoto + '/' + PrimoTutti;\n        return this.httpService.get(this.constants.getDropdownServiceName + path);\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { ConstantsService } from '../common/constants.service';\n\n@Injectable()\nexport class IconeService {\n\n    private tipologiaVilla: Array<string> = [\n        \"A/1\",\n        \"A/7\",\n        \"A/8\",\n        \"A/9\"\n    ];\n    private tipologiaCasa: Array<string> = [\n        \"A/2\",\n        \"A/3\",\n        \"A/4\",\n        \"A/5\",\n        \"A/11\"\n    ];\n    private tipologiaAgricolo: Array<string> = [\n        \"A/6\",\n        \"D/10\"\n    ];\n    private tipologiaUfficio: Array<string> = [\n        \"A/10\",\n        \"C/3\",\n        \"E/3\",\n        \"E/4\",\n        \"E/6\",\n        \"E/8\",\n        \"E/9\",\n        \"F/1\",\n        \"F/2\"\n    ];\n    private tipologiaAlbergo: Array<string> = [\n        \"B/1\",\n        \"B/3\",\n        \"C/5\",\n        \"D/2\"\n    ];\n    private tipologiaOspedale: Array<string> = [\n        \"B/2\",\n        \"D/4\"\n    ];\n    private tipologiaScuola: Array<string> = [\n        \"B/5\"\n    ];\n    private tipologiaMuseo: Array<string> = [\n        \"B/6\"\n    ];\n    private tipologiaChiesa: Array<string> = [\n        \"B/7\",\n        \"E/7\"\n    ];\n    private tipologiaMagazzino: Array<string> = [\n        \"B/8\",\n        \"C/2\",\n        \"E/5\",\n        \"F/5\"\n    ];\n    private tipologiaNegozio: Array<string> = [\n        \"C/1\",\n        \"D/8\"\n    ];\n    private tipologiaSport: Array<string> = [\n        \"C/4\",\n        \"D/6\"\n    ];\n    private tipologiaGarage: Array<string> = [\n        \"C/6\",\n        \"C/7\"\n    ];\n    private tipologiaFabbrica: Array<string> = [\n        \"D/1\",\n        \"D/7\"\n    ];\n    private tipologiaTeatro: Array<string> = [\n        \"D/3\"\n    ];\n    private tipologiaBanca: Array<string> = [\n        \"D/5\"\n    ];\n    private tipologiaPonte: Array<string> = [\n        \"D/9\",\n        \"E/2\"\n    ];\n    private tipologiaStazione: Array<string> = [\n        \"E/1\"\n    ];\n    private tipologiaCantiere: Array<string> = [\n        \"F/3\",\n        \"F/4\",\n        \"F/6\"\n    ];\n\n    constructor(private constants: ConstantsService) { }\n\n    public getClasseIcona(tipologia: string): string {\n        if (this.tipologiaAgricolo.includes(tipologia)) {\n            return this.constants.tipologiaImmobileAgricolo;\n        }\n        if (this.tipologiaAlbergo.includes(tipologia)) {\n            return this.constants.tipologiaImmobileAlbergo;\n        }\n        if (this.tipologiaBanca.includes(tipologia)) {\n            return this.constants.tipologiaImmobileBanca;\n        }\n        if (this.tipologiaCantiere.includes(tipologia)) {\n            return this.constants.tipologiaImmobileCantiere;\n        }\n        if (this.tipologiaCasa.includes(tipologia)) {\n            return this.constants.tipologiaImmobileCasa;\n        }\n        if (this.tipologiaChiesa.includes(tipologia)) {\n            return this.constants.tipologiaImmobileChiesa;\n        }\n        if (this.tipologiaFabbrica.includes(tipologia)) {\n            return this.constants.tipologiaImmobileFabbrica;\n        }\n        if (this.tipologiaGarage.includes(tipologia)) {\n            return this.constants.tipologiaImmobileGarage;\n        }\n        if (this.tipologiaMagazzino.includes(tipologia)) {\n            return this.constants.tipologiaImmobileMagazzino;\n        }\n        if (this.tipologiaMuseo.includes(tipologia)) {\n            return this.constants.tipologiaImmobileMuseo;\n        }\n        if (this.tipologiaNegozio.includes(tipologia)) {\n            return this.constants.tipologiaImmobileNegozio;\n        }\n        if (this.tipologiaOspedale.includes(tipologia)) {\n            return this.constants.tipologiaImmobileOspedale;\n        }\n        if (this.tipologiaPonte.includes(tipologia)) {\n            return this.constants.tipologiaImmobilePonte;\n        }\n        if (this.tipologiaScuola.includes(tipologia)) {\n            return this.constants.tipologiaImmobileScuola;\n        }\n        if (this.tipologiaSport.includes(tipologia)) {\n            return this.constants.tipologiaImmobileSport;\n        }\n        if (this.tipologiaStazione.includes(tipologia)) {\n            return this.constants.tipologiaImmobileStazione;\n        }\n        if (this.tipologiaTeatro.includes(tipologia)) {\n            return this.constants.tipologiaImmobileTeatro;\n        }\n        if (this.tipologiaUfficio.includes(tipologia)) {\n            return this.constants.tipologiaImmobileUfficio;\n        }\n        if (this.tipologiaVilla.includes(tipologia)) {\n            return this.constants.tipologiaImmobileVilla;\n        }\n        return this.constants.tipologiaImmobileCasa;\n    }\n}\n","import { ErrorHandlerService } from './handler/error/error-handler.service';\nimport { LogErroriService } from './services/log-errori/log-errori.service';\nimport { NgModule } from '@angular/core';\n\nimport { Storage } from '@ionic/Storage';\nimport { IonicStorageModule } from '@ionic/Storage';\n\nimport { ConstantsService } from './services/common/constants.service';\nimport { BrokerHttpService } from './services/common/brokerhttp.service';\nimport { ImmobiliService } from './services/immobili/immobili.service';\nimport { ClientiService } from './services/clienti/clienti.service';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { DropdownService } from './services/dropdown/dropdown.service';\nimport { IconeService } from './services/icone/icone.service';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    HttpClientModule,\n    IonicStorageModule.forRoot()\n  ],\n  providers: [\n    ConstantsService,\n    BrokerHttpService,\n    ImmobiliService,\n    ClientiService,\n    DropdownService,\n    LogErroriService,\n    ErrorHandlerService,\n    IconeService\n  ],\n  exports: [\n  ]\n})\nexport class BrokerLibModule {\n  static forRoot() {\n    return {\n      ngModule: BrokerLibModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\n\n/**\n * Classe che raggruppa i servizi relativi ai Report\n *\n * @export\n * ReportService\n */\n@Injectable()\nexport class ReportService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per ottenere il report della situazione generale di un cliente\n     *\n     * @param cliente_id\n     * @param tokenValue Token di autenticazione ottenuto dalla login\n     * @returns\n     */\n    public getSituazioneGenerale(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.situazioneGeneraleServiceName + this.constants.pathSeparator + cliente_id);\n    }\n\n    /**\n     * Chiamata per ottenere i dati che vanno a popolare i grafici\n     *\n     * @param  cliente_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns\n     */\n    public getGrafici(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.graficiServiceName + this.constants.pathSeparator + cliente_id);\n    }\n\n    /**\n     * Chiamata per scatenare l'invio del report generale in formato PDF al cliente passandolo in una mail\n     *\n     * @param  cliente_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns\n     */\n    public getPdfReport(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.pdfReportServiceName + this.constants.pathSeparator + cliente_id);\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { Http } from \"../../models/common/http.namespace\";\nimport { LoginRequest } from \"../../models/login/loginRequest\";\nimport { CambioPasswordRequest } from \"../../models/login/cambioPasswordRequest\";\n\nimport { BrokerHttpService } from \"../common/brokerhttp.service\";\nimport { WsToken } from '../../models/login/wsToken';\nimport { StoreService } from '../store/store.service';\nimport { ConstantsService } from '../common/constants.service';\n\n@Injectable()\nexport class LoginService {\n    constructor(\n        private httpService: BrokerHttpService,\n        private storeService: StoreService,\n        private constants: ConstantsService) {\n    }\n\n    public CambioPassword(bodyCambio: CambioPasswordRequest) {\n        return this.httpService.post(this.constants.cambioPasswordServiceName, bodyCambio);\n    }\n\n    public Login(body: LoginRequest): Observable<Http.HttpResponse> {\n        // eseguo la post\n        return this.httpService.postNoToken(this.constants.loginServiceName, body);\n    }\n\n    // public Login(body: LoginRequest): Observable<Http.HttpResponse> { // momentaneamente in get per usare il servizio finto di test\n    //     // eseguo la post\n    //     return this.httpService.getNoToken(this.constants.loginServiceName);\n    // }\n\n    /*\n    QUESTA Ã¨ LA LOGICA DA METTERE SUL CHIAMANTE DELLA LOGIN\n    .subscribe(r => {\n\n            let response = new WsToken();\n            if (r.Success) {\n                response = r.Data;\n                this.storeService.setUserData(response); // eventuale controllo su esito salvataggio in sessione\n            } else {\n                let errorMessage = r.ErrorMessage;\n\n                // invio al server dell'errore\n\n                // popup errore\n            }\n\n        });\n    } */\n}\n","import { GraficiAndamentoAnnuale } from './graficiAndamentoAnnuale';\nimport { GraficiIndicatore } from './graficiIndicatore';\nimport { GraficiConcentrazione } from './graficiConcentrazione';\nimport { GraficiAffittuario } from './graficiAffittuario';\n\nexport class Grafici {\n    public andamento_annuale: Array<GraficiAndamentoAnnuale>;\n    public indicatori: Array<GraficiIndicatore>;\n    public concentrazione: Array<GraficiConcentrazione>;\n    public affittuari: Array<GraficiAffittuario>;\n}\n","export class GraficiAffittuario {\n    public descrizione_affittuario: string;\n    public percentuale: number;\n}\n","export class GraficiAndamentoAnnuale {\n    public anno: number;\n    public attivo: number;\n    public passivo: number;\n}\n","export class GraficiConcentrazione {\n    public codice_catastale: string;\n    public percentuale: number;\n}\n","export class GraficiIndicatore {\n    public descrizione_indicatore: string;\n    public percentuale: number;\n}\n","import { ReportGeneraleAttivo } from './reportGeneraleAttivo';\nimport { ReportGeneralePassivo } from './reportGeneralePassivo';\n\nexport class ReportGenerale {\n    public proprieta_id: number;\n    public codice_tipologia: string;\n    public descrizione_tipologia: string;\n    public valore_acquisto: number;\n    public quota: number;\n    public indirizzo: string;\n    public civico: string;\n    public citta: string;\n    public cap: string;\n    public provincia: string;\n    public prima_casa: string;\n    public passivi: Array<ReportGeneralePassivo>;\n    public attivo: ReportGeneraleAttivo;\n}\n","export class ReportGeneraleAttivo {\n    public descrizione_affittuario: string;\n    public cedolare_secca: string;\n    public aliquota_cedolare: string;\n    public prima_scadenza_anni: string;\n    public data_inizio: string;\n    public importo_mensile: string;\n}\n","export class ReportGeneralePassivo {\n    public descrizione_passivo: string;\n    public importo_annuale: string;\n}\n","export class ReportGeneraleOggettoColonna {\n    public descrizione: string;\n    public valore: string;\n}\n","export class AbilitaAppClienteRequest {\n    public cliente_id: string;\n    public password: string;\n}","export class BookValue {\n    public gruppo_catastale: string;\n    public codice_catastale: string;\n    public descrizione_tipologia: string;\n    public book_value: number;\n    public numero_proprieta: number;\n}","export class InserimentoClienteRequest {\n    public cliente_id: number;\n    public promotore_id: number;\n    public nome: string;\n    public cognome: string;\n    public codice_fiscale: string;\n    public email: string;\n}\n","export class InserimentoClienteResponse {\n    public return_id: number;\n}\n","// tslint:disable-next-line: no-namespace\nexport class Immobile {\n    public cliente_id: number;\n    public proprieta_id: number;\n    public indirizzo: string;\n    public civico: string;\n    public email: string;\n    public citta: string;\n    public cap: string;\n    public provincia: string;\n    public prima_casa: string;\n    public valore_acquisto: number;\n    public quota: number;\n    public data_aggiornamento: number;\n    public codice_tipologia: string;\n}\n\n\n","import { NumberSymbol } from '@angular/common';\n\nexport class CancellazioneImmobileRequest {\n    public immobile_id: number;\n}\n","export class CointestatarioDettaglio {\n    public proprieta_possesso_id: number;\n    public nominativo: string;\n    public codice_fiscale: string;\n    public quota: number;\n}","import { ImmobileDettaglio } from './immobileDettaglio';\n\nexport class ImmobileDettaglioVM extends ImmobileDettaglio {\n    public tasse_totale: number;\n}\n","export class InserimentoImmobileResponse {\n    public return_id: number;\n}\n","export class SpesaDettaglio {\n    public proprieta_spese_id: number;\n    public spesa_id: number;\n    public descrizione_spesa: string;\n    public importo_annuale: number;\n}","export class TassaDettaglio {\n    public proprieta_tasse_id: number;\n    public tassa_id: number;\n    public descrizione_tassa: string;\n    public importo_annuale: number;\n}","export class PianoAmmortamento {\n    public indice: number;\n    public anno: number;\n    public importo_rata: number;\n    public quota_interessi: number;\n    public quota_capitale: number;\n    public interessi_residui: number;\n    public capitale_residuo: number;\n}","import { PianoAmmortamento } from './pianoAmmortamento';\n\nexport class AnnoPianoAmmortamento {\n    public anno: number;\n    public piano_lista: Array<PianoAmmortamento>;\n}","export class LoginRequest {\n    public username: string;\n    public password: string;\n    public id_phone: string;\n    public app_chiamante: string;\n}\n","export class Utente {\n    public utente_id: number;\n    public nome: string;\n    public cognome: string;\n    public codice_fiscale: string;\n    public email: string;\n}\n","export class CambioPasswordRequest {\n    public vecchia_password: string;\n    public nuova_password: string;\n    public ripeti_password: string;\n}\n","export class ErrorMessage {\n    public msg_tipo: string;\n    public msg_code: number;\n    public msg_testo: string;\n    public msg_method: string;\n    public msg_techdata: string;\n}","export class DdlItem {\n    public codice: number;\n    public descrizione: string;\n}\n"]}