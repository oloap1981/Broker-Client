{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://broker-lib/lib/services/common/constants.service.ts","ng://broker-lib/lib/services/common/brokerhttp.service.ts","ng://broker-lib/lib/models/common/wslogerrore.ts","ng://broker-lib/lib/services/log-errori/log-errori.service.ts","ng://broker-lib/lib/models/login/wsToken.ts","ng://broker-lib/lib/services/store/store.service.ts","ng://broker-lib/lib/services/immobili/immobili.service.ts","ng://broker-lib/lib/models/clienti/cliente.ts","ng://broker-lib/lib/models/immobili/immobileDettaglio.ts","ng://broker-lib/lib/models/common/connection.ts","ng://broker-lib/lib/models/immobili/datiCatastaliDettaglio.ts","ng://broker-lib/lib/models/immobili/omiDettaglio.ts","ng://broker-lib/lib/models/immobili/mutuoDettaglio.ts","ng://broker-lib/lib/models/immobili/affittoDettaglio.ts","ng://broker-lib/lib/services/common/session.service.ts","ng://broker-lib/lib/services/common/alert.service.ts","ng://broker-lib/lib/handler/error/error-handler.service.ts","ng://broker-lib/lib/services/clienti/clienti.service.ts","ng://broker-lib/lib/services/dropdown/dropdown.service.ts","ng://broker-lib/lib/services/icone/icone.service.ts","ng://broker-lib/lib/broker-lib.module.ts","ng://broker-lib/lib/services/report/report.service.ts","ng://broker-lib/lib/services/documenti/documenti.service.ts","ng://broker-lib/lib/services/login/login.service.ts","ng://broker-lib/lib/models/report/grafici.ts","ng://broker-lib/lib/models/report/graficiAffittuario.ts","ng://broker-lib/lib/models/report/graficiAndamentoAnnuale.ts","ng://broker-lib/lib/models/report/graficiConcentrazione.ts","ng://broker-lib/lib/models/report/graficiIndicatore.ts","ng://broker-lib/lib/models/report/reportGenerale.ts","ng://broker-lib/lib/models/report/reportGeneraleAttivo.ts","ng://broker-lib/lib/models/report/reportGeneralePassivo.ts","ng://broker-lib/lib/models/report/reportGeneraleOggettoColonna.ts","ng://broker-lib/lib/models/clienti/abilitaAppClienteRequest.ts","ng://broker-lib/lib/models/clienti/bookValue.ts","ng://broker-lib/lib/models/clienti/inserimentoClienteRequest.ts","ng://broker-lib/lib/models/clienti/inserimentoClienteResponse.ts","ng://broker-lib/lib/models/immobili/immobile.ts","ng://broker-lib/lib/models/immobili/cancellazioneImmobileRequest.ts","ng://broker-lib/lib/models/immobili/cointestatarioDettaglio.ts","ng://broker-lib/lib/models/immobili/immobileDettaglioVM.ts","ng://broker-lib/lib/models/immobili/inserimentoImmobileResponse.ts","ng://broker-lib/lib/models/immobili/spesaDettaglio.ts","ng://broker-lib/lib/models/immobili/tassaDettaglio.ts","ng://broker-lib/lib/models/immobili/pianoAmmortamento.ts","ng://broker-lib/lib/models/immobili/annoPianoAmmortamento.ts","ng://broker-lib/lib/models/documenti/cartella.ts","ng://broker-lib/lib/models/documenti/documento.ts","ng://broker-lib/lib/models/login/loginRequest.ts","ng://broker-lib/lib/models/login/utente.ts","ng://broker-lib/lib/models/login/cambioPasswordRequest.ts","ng://broker-lib/lib/models/common/errormessage.ts","ng://broker-lib/lib/models/common/ddlitem.ts","ng://broker-lib/lib/models/common/ddlItemSearch.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","ConstantsService","baseAppUrl","tokenHeaderKey","pathSeparator","loginServiceName","cambioPasswordServiceName","getImmobiliServiceName","getImmobileServiceName","putImmobileServiceName","delImmobileServiceName","getCatastoServiceName","getPianoAmmortamentoServiceName","getClientiServiceName","getClienteServiceName","putClientiServiceName","abilitaAppClienteServiceName","bookValueServiceName","pianoAmmortamentoServiceName","situazioneGeneraleServiceName","graficiServiceName","pdfReportServiceName","postErroreServiceName","getDropdownServiceName","getCartelle","getDocumento","putCartelle","putDocumento","tipologiaImmobileVilla","tipologiaImmobileCasa","tipologiaImmobileAgricolo","tipologiaImmobileUfficio","tipologiaImmobileAlbergo","tipologiaImmobileOspedale","tipologiaImmobileScuola","tipologiaImmobileMuseo","tipologiaImmobileChiesa","tipologiaImmobileMagazzino","tipologiaImmobileNegozio","tipologiaImmobileSport","tipologiaImmobileGarage","tipologiaImmobileFabbrica","tipologiaImmobileTeatro","tipologiaImmobileBanca","tipologiaImmobilePonte","tipologiaImmobileStazione","tipologiaImmobileCantiere","tipologiaImmobileTerreno","getDdlEuribor","getDdlAffittuari","getDdlTasse","getDdlOmi","getDdlTipologiaCatastale","getDdlComuni","httpTimeout","Injectable","BrokerHttpService","http","constants","backEnd","httpClientLogin","HttpClient","prototype","get","path","pipe","timeout","getNoToken","console","log","post","postNoToken","HttpBackend","WsLogErrore","LogErroriService","httpService","postErrore","errorData","generateErrorMessage","errorMessage","logErrore","log_descrerr","msg_testo","log_stacktrace","msg_techdata","WsToken","StoreService","storage","USERKEY","CLIENTEKEY","wsToken","clearUserData","clear","cliente","setUserData","ws_token","set","val","setClientData","getUserDataPromise","_this","getClientePromise","Storage","ImmobiliService","getImmobili","id_cliente","getImmobile","immobile_id","putImmobile","immobile","delImmobile","cancellazioneRequest","invioDatiCatastali","getPianoAmmortamentoImmobile","ImmobileDettaglio","proprieta_id","codice_fiscale","codice_tipologia","descrizione_tipologia","data_aggiornamento","valore_acquisto","valore_catastale","valore_commerciale","quota","catastale_cod","comune_zone_cod","indirizzo","civico","citta","cap","provincia","istat_cod","latitudine","longitudine","prima_casa","destinazione_uso_id","descrizione_uso","mutuo","affitto","Connection","DatiCatastaliDettaglio","proprieta_catasto_id","sezione","foglio","zona","micro_zona","particella","subalterno","categoria","classe","rendita","vani","superficie_interni","superficie_totale","OmiDettaglio","valore_omi","valore_pot","affitto_pot","ammortamento_decadenza","MutuoDettaglio","proprieta_mutuo_id","detrazione_interessi","tipo_tasso","euribor_id","descrizione_euribor","spread","rate_id","descrizione_rate","numero_rate","durata","data_inizio","importo_iniziale","tasso_fisso","AffittoDettaglio","proprieta_affitto_id","tipo_affittuario_id","descrizione_affittuario","spese_condominiali","importo_spese_condominiali","cedolare_secca","aliquota_cedolare","prima_scadenza_anni","importo_mensile","SessionService","storeService","immobiliService","elencoImmobiliSubject","Subject","elencoImmobiliObs","asObservable","userDataSubject","userDataObservable","userData","clientData","Cliente","connection","immobiliCliente","dati_catastali","spese","omi","mutuo_dettaglio","affitto_dettaglio","tasse","cointestatari","intestazionePagina","paginaPrecedente","setPaginaPrecedente","pagina","getPaginaPrecedente","setIntestazionePagina","intestazione","getIntestazionePagina","setCliente","caricaImmobili","cliente_id","idCliente","subscribe","r","Success","Data","elenco_immobili","undefined","client","getUserData","existsSessionData","JSON","stringify","token_value","loadUserData","getCliente","clearCliente","getImmobiliCliente","setImmobileDettaglio","immobileDettaglio","getImmobileDettaglio","clearImmobileDettaglio","setConnection","conn","getConnection","AlertService","alertController","sessionService","router","presentAlert","alertMessage","create","header","message","buttons","_alert","present","presentErrorAlert","presentAlertLogout","text","role","cssClass","handler","blah","navigate","AlertController","Router","ErrorHandlerService","injector","zone","logErroriService","alertService","handleError","error","token","errore","log_metodoerr","log_link","log_query","username","Injector","NgZone","ClientiService","getClienti","idcliente","putCliente","abilitaAppCliente","request","getBookValue","getPianoAmmortamento","mutuo_id","DropdownService","getTipologieTasse","primacasa","residente","affittata","getDropdown","getBooleanAsString","getTipiAffittuari","getEuribor","getTipiOmi","idComuneIstat","getTipologieCatastali","getComuni","nomeComune","Tipoddl","Filtro","input","IconeService","tipologiaVilla","tipologiaCasa","tipologiaAgricolo","tipologiaTerreno","tipologiaUfficio","tipologiaAlbergo","tipologiaOspedale","tipologiaScuola","tipologiaMuseo","tipologiaChiesa","tipologiaMagazzino","tipologiaNegozio","tipologiaSport","tipologiaGarage","tipologiaFabbrica","tipologiaTeatro","tipologiaBanca","tipologiaPonte","tipologiaStazione","tipologiaCantiere","getClasseIcona","tipologia","includes","BrokerLibModule","forRoot","ngModule","providers","NgModule","args","declarations","imports","HttpClientModule","IonicStorageModule","exports","ReportService","getSituazioneGenerale","getGrafici","getPdfReport","DocumentiService","idcartella","iddocumento","cartella","documento","LoginService","CambioPassword","bodyCambio","Login","Grafici","GraficiAffittuario","GraficiAndamentoAnnuale","GraficiConcentrazione","GraficiIndicatore","ReportGenerale","ReportGeneraleAttivo","ReportGeneralePassivo","ReportGeneraleOggettoColonna","AbilitaAppClienteRequest","BookValue","InserimentoClienteRequest","InserimentoClienteResponse","CancellazioneImmobileRequest","CointestatarioDettaglio","proprieta_possesso_id","nominativo","ImmobileDettaglioVM","__","constructor","tslib_1.__extends","InserimentoImmobileResponse","SpesaDettaglio","proprieta_spese_id","descrizione_spesa","importo_annuale","TassaDettaglio","proprieta_tasse_id","descrizione_tassa","PianoAmmortamento","AnnoPianoAmmortamento","Cartella","Documento","LoginRequest","Utente","CambioPasswordRequest","ErrorMessage","DdlItem","DdlItemSearch"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ConstantsService {\n    public readonly baseAppUrl: string = 'http://89.31.75.45:443/Spring-JPA-Security';\n    // public readonly baseAppUrl: string = 'http://test.readvice.it:443/Spring-JPA-Security';\n    public readonly tokenHeaderKey: string = 'Authorization';\n    public readonly pathSeparator: string = '/';\n\n    public readonly loginServiceName: string = 'login';\n    public readonly cambioPasswordServiceName: string = 'putPassword';\n\n    // immobili\n    public readonly getImmobiliServiceName: string = 'getimmobili';\n    public readonly getImmobileServiceName: string = 'getimmobile';\n    public readonly putImmobileServiceName: string = 'putimmobile';\n    public readonly delImmobileServiceName: string = 'delimmobile';\n    public readonly getCatastoServiceName: string = 'getcatasto';\n    public readonly getPianoAmmortamentoServiceName: string = 'getpiano';\n\n    // clienti\n    public readonly getClientiServiceName: string = 'getclienti';\n    public readonly getClienteServiceName: string = 'getcliente';\n    public readonly putClientiServiceName: string = 'putcliente';\n    public readonly abilitaAppClienteServiceName: string = 'appcliente';\n    public readonly bookValueServiceName: string = 'getbookvalue';\n    public readonly pianoAmmortamentoServiceName: string = 'getpiano';\n\n    // report\n    public readonly situazioneGeneraleServiceName: string = 'getsituazione';\n    public readonly graficiServiceName: string = 'getgrafici';\n    public readonly pdfReportServiceName: string = 'getpdfreport';\n\n    public readonly postErroreServiceName: string = 'writeLog';\n    public readonly getDropdownServiceName: string = 'get_dropdown';\n\n    // documenti\n    public readonly getCartelle: string = 'getcartelle';\n    public readonly getDocumento: string = 'getdocumento';\n    public readonly putCartelle: string = 'putcartelle';\n    public readonly putDocumento: string = 'putdocumento';\n\n    // tipologia icone immobili\n    public readonly tipologiaImmobileVilla: string = 'villa';\n    public readonly tipologiaImmobileCasa: string = 'casa';\n    public readonly tipologiaImmobileAgricolo: string = 'agricolo';\n    public readonly tipologiaImmobileUfficio: string = 'ufficio';\n    public readonly tipologiaImmobileAlbergo: string = 'albergo';\n    public readonly tipologiaImmobileOspedale: string = 'ospedale';\n    public readonly tipologiaImmobileScuola: string = 'scuola';\n    public readonly tipologiaImmobileMuseo: string = 'museo';\n    public readonly tipologiaImmobileChiesa: string = 'chiesa';\n    public readonly tipologiaImmobileMagazzino: string = 'magazzino';\n    public readonly tipologiaImmobileNegozio: string = 'negozio';\n    public readonly tipologiaImmobileSport: string = 'sport';\n    public readonly tipologiaImmobileGarage: string = 'garage';\n    public readonly tipologiaImmobileFabbrica: string = 'fabbrica';\n    public readonly tipologiaImmobileTeatro: string = 'teatro';\n    public readonly tipologiaImmobileBanca: string = 'banca';\n    public readonly tipologiaImmobilePonte: string = 'ponte';\n    public readonly tipologiaImmobileStazione: string = 'stazione';\n    public readonly tipologiaImmobileCantiere: string = 'cantiere';\n    public readonly tipologiaImmobileTerreno: string = 'terreno';\n\n    // dropdown\n    public readonly getDdlEuribor: string = 'get_ddl_tipo_euribor';\n    public readonly getDdlAffittuari: string = 'get_ddl_tipo_affittuari';\n    public readonly getDdlTasse: string = 'get_ddl_tasse';\n    public readonly getDdlOmi: string = 'get_ddl_omi';\n    public readonly getDdlTipologiaCatastale: string = 'get_ddl_tipologia_catastale';\n    public readonly getDdlComuni: string = 'get_ddl_comuni';\n\n    // vari\n    public readonly httpTimeout: number = 5000; // per il momento il timeout Ã¨ impostato a 5 secondi per le chiamate get e post\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpBackend } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\n\nimport { Http } from \"../../models/common/http.namespace\";\n\nimport { ConstantsService } from \"./constants.service\";\n\nimport { timeout } from \"rxjs/operators\";\n\n\n@Injectable()\nexport class BrokerHttpService {\n\n    private httpClientLogin: HttpClient;\n\n    constructor(\n        private http: HttpClient,\n        private constants: ConstantsService,\n        private backEnd: HttpBackend) {\n        this.httpClientLogin = new HttpClient(this.backEnd);\n    }\n\n    public get(path: string): Observable<Http.HttpResponse> {\n        return this.http.get<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path).pipe(\n            timeout(this.constants.httpTimeout)\n        );\n    }\n\n    public getNoToken(path: string): Observable<Http.HttpResponse> {\n        console.log(\"HttpService get \" + path);\n        return this.httpClientLogin.get<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path).pipe(\n            timeout(this.constants.httpTimeout)\n        );\n    }\n\n    public post(path: string, body: any): Observable<Http.HttpResponse> {\n        return this.http.post<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path, body).pipe(\n            timeout(this.constants.httpTimeout)\n        );\n    }\n\n    public postNoToken(path: string, body: any): Observable<Http.HttpResponse> {\n        console.log(\"HttpService post \" + path);\n        return this.httpClientLogin.post<Http.HttpResponse>(this.constants.baseAppUrl + \"/\" + path, body).pipe(\n            timeout(this.constants.httpTimeout)\n        );\n    }\n\n}\n","export class WsLogErrore {\n    public token: string;\n    public log_stacktrace: string;\n    public log_descrerr: string;\n    public log_metodoerr: string;\n    public log_link: string;\n    public log_query: string;\n    public username: string;\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { WsLogErrore } from '../../models/common/wslogerrore';\nimport { ErrorMessage } from '../../models/common/errormessage';\n\n/**\n *\n *\n * @export\n * LogErroriService\n */\n@Injectable()\nexport class LogErroriService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per il salvataggio su persistenza di errori\n     *\n     * @param errorData\n     * @param tokenValue\n     * @returns\n     * LogErroriService\n     */\n    public postErrore(errorData: WsLogErrore): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.postErroreServiceName, errorData);\n    }\n\n    public generateErrorMessage(errorMessage: ErrorMessage): WsLogErrore {\n        const logErrore: WsLogErrore = new WsLogErrore();\n\n        logErrore.log_descrerr = errorMessage.msg_testo;\n        logErrore.log_stacktrace = errorMessage.msg_techdata;\n\n        return logErrore;\n    }\n}\n","import { Utente } from './utente';\nimport { Cliente } from '../clienti/cliente';\n\nexport class WsToken {\n    public token_value: string;\n    public tipo_utente: string;\n    public utente: Utente;\n    public cliente: Cliente;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Storage } from '@ionic/Storage';\nimport { WsToken } from '../../models/login/wsToken';\nimport { Cliente } from '../../models/clienti/cliente';\n\n@Injectable()\nexport class StoreService {\n\n    private USERKEY = \"user\";\n    private CLIENTEKEY = \"client\";\n\n    private wsToken: WsToken;\n    private cliente: Cliente;\n\n    constructor(private storage: Storage) {\n        this.wsToken = null;\n    }\n\n    public clearUserData(): void {\n        this.storage.clear();\n        this.wsToken = null;\n        this.cliente = null;\n    }\n\n    public setUserData(ws_token: WsToken): number {\n        console.log(\"setUserData\");\n        this.wsToken = ws_token;\n        if (ws_token != null) {\n            this.storage.set(this.USERKEY, ws_token).then((val) => {\n                console.log(val);\n            });\n        } else {\n            return -1;\n        }\n        return 1;\n    }\n\n    public setClientData(cliente: Cliente): number {\n        console.log(\"setUserData\");\n        this.cliente = cliente;\n        if (cliente != null) {\n            this.storage.set(this.CLIENTEKEY, cliente).then((val) => {\n                console.log(val);\n            });\n        } else {\n            return -1;\n        }\n        return 1;\n    }\n\n    public getUserDataPromise() {\n        return new Promise(resolve => {\n            if (this.wsToken == null) {\n                // store service prima inizializzaione\n                this.storage.get(this.USERKEY).then((val: WsToken) => {\n                    // recuperato token dal database\n                    console.log(val);\n                    if (val != null) {\n                        resolve(val);\n                    } else {\n                        console.log(\"necessario login\");\n                        this.setUserData(null);\n                        this.wsToken = null;\n                        // devo andare alla pagina del login\n                        resolve(null);\n                    }\n                }\n                );\n            } else {\n                // store service giÃ  inizializzato\n\n                // come al punto precedente servirebbe controllare il token ed eventualmente fare di nuovo il login;\n\n                resolve(this.wsToken);\n            }\n        });\n    }\n\n    public getClientePromise() {\n        return new Promise(resolve => {\n            if (this.cliente == null) {\n                // store service prima inizializzaione\n                this.storage.get(this.CLIENTEKEY).then((val: Cliente) => {\n                    // recuperato token dal database\n                    console.log(val);\n                    if (val != null) {\n                        resolve(val);\n                    } else {\n                        console.log(\"necessario login\");\n                        this.setClientData(null);\n                        this.cliente = null;\n                        // devo andare alla pagina del login\n                        resolve(null);\n                    }\n                }\n                );\n            } else {\n                // store service giÃ  inizializzato\n\n                // come al punto precedente servirebbe controllare il token ed eventualmente fare di nuovo il login;\n\n                resolve(this.cliente);\n            }\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { ImmobileDettaglio } from '../../models/immobili/immobileDettaglio';\nimport { CancellazioneImmobileRequest } from '../../models/immobili/cancellazioneImmobileRequest';\n\n/**\n * Classe che raduna tutti i servizi riconducibili all'entitÃ  immobile\n *\n * @export\n * ImmobiliService\n */\n@Injectable()\nexport class ImmobiliService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per ottenere l'elenco degli immobili appartenenti ad uno specifico cliente\n     *\n     * @param  id_cliente\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'elenco degli immobili\n     */\n    public getImmobili(id_cliente: string): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getImmobiliServiceName\n            + this.constants.pathSeparator\n            + id_cliente);\n        // return this.httpService.get('getimmobili' + '/' + idCliente, tokenValue);\n    }\n\n    /**\n     * Chiamata per ottenere il singolo immobile passando il suo identificativo unico\n     *\n     * @param  immobile_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'oggetto Immobile\n     */\n    public getImmobile(immobile_id: string): Observable<Http.HttpResponse> {\n        // return this.httpService.get(this.constants.getImmobileServiceName + this.constants.pathSeparator + immobile_id, tokenValue);\n        return this.httpService.get(this.constants.getImmobileServiceName\n            + this.constants.pathSeparator\n            + immobile_id);\n    }\n\n    /**\n     * Chiamata per inserire un nuovo immobile\n     *\n     * @param  immobile\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'id dell'immobile appena salvato\n     */\n    public putImmobile(immobile: ImmobileDettaglio): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.putImmobileServiceName, immobile);\n    }\n\n    /**\n     * Chiamata per cancellare un immobile passando il suo identificativo unico\n     *\n     * @param  cancellazioneRequest\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages.\n     */\n    public delImmobile(cancellazioneRequest: CancellazioneImmobileRequest): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.delImmobileServiceName, cancellazioneRequest);\n    }\n\n    /**\n     * Chiamata per attivare il flusso di invio dei dati catastali via mail all'utente proprietario dell'immobile di cui deve \n     * essere passato l'identificativo unico\n     *\n     * @param  immobile_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages.\n     */\n    public invioDatiCatastali(immobile_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getCatastoServiceName + this.constants.pathSeparator + immobile_id);\n    }\n\n    public getPianoAmmortamentoImmobile(immobile_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getPianoAmmortamentoServiceName + this.constants.pathSeparator + immobile_id);\n    }\n}\n","// tslint:disable-next-line: no-namespace\nexport class Cliente {\n    public cliente_id: number;\n    public nome: string;\n    public cognome: string;\n    public email: string;\n    public codice_fiscale: string;\n    public numero_proprieta: number;\n    public book_value: number;\n    public data_aggiornamento: string;\n    public omi_value_min: number;\n    public omi_value_max: number;\n    public stato_cliente: string;\n}\n","import { CointestatarioDettaglio } from './cointestatarioDettaglio';\nimport { TassaDettaglio } from './tassaDettaglio';\nimport { SpesaDettaglio } from './spesaDettaglio';\nimport { AffittoDettaglio } from './affittoDettaglio';\nimport { MutuoDettaglio } from './mutuoDettaglio';\nimport { DatiCatastaliDettaglio } from './datiCatastaliDettaglio';\nimport { OmiDettaglio } from './omiDettaglio';\n\nexport class ImmobileDettaglio {\n    public proprieta_id: number = 0;\n    public tipologie_catastali_id: number;\n    public codice_fiscale: string = \"\";\n    public codice_tipologia: string = \"\";\n    public descrizione_tipologia: string = \"\";\n    public data_aggiornamento: number = 0;\n    public valore_acquisto: number = 0;\n    public valore_catastale: number = 0;\n    public valore_commerciale: number = 0;\n    public quota: number = 0;\n    public catastale_cod: string = \"\";\n    public comune_zone_cod: string = \"\";\n    public indirizzo: string = \"\";\n    public civico: string = \"\";\n    public citta: string = \"\";\n    public cap: string = \"\";\n    public provincia: string = \"\";\n    public istat_cod: string = \"\";\n    public latitudine: string = \"\";\n    public longitudine: string = \"\";\n    public prima_casa: boolean = false;\n    public destinazione_uso_id: number = 0;\n    public descrizione_uso: string = \"\";\n    public mutuo: boolean = false;\n    public affitto: boolean = false;\n    public cointestatari: Array<CointestatarioDettaglio>;\n    public tasse: Array<TassaDettaglio>;\n    public spese: Array<SpesaDettaglio>;\n    public affitto_dettaglio: AffittoDettaglio;\n    public mutuo_dettaglio: MutuoDettaglio;\n    public dati_catastali: DatiCatastaliDettaglio;\n    public omi: OmiDettaglio;\n}","export class Connection {\n    public url: string;\n    public pathseparator: string;\n    public headertokenkey: string;\n}\n","export class DatiCatastaliDettaglio {\n    public proprieta_catasto_id: number = 0;\n    public sezione: string = '';\n    public foglio: string = '';\n    public zona: string = '';\n    public micro_zona: string = '';\n    public particella: string = '';\n    public subalterno: string = '';\n    public categoria: string = '';\n    public classe: string = '';\n    public rendita: number = 0;\n    public vani: string = '';\n    public superficie_interni: number = 0;\n    public superficie_totale: number = 0;\n}","export class OmiDettaglio {\n    public valore_omi: number = 0;\n    public valore_pot: number = 0;\n    public affitto_pot: number = 0;\n    public ammortamento_decadenza: number = 0;\n}\n","export class MutuoDettaglio {\n    public proprieta_mutuo_id: number = 0;\n    public detrazione_interessi: string = '';\n    public tipo_tasso: string = '';\n    public euribor_id: number = 0;\n    public descrizione_euribor: string = '';\n    public spread: number = 0;\n    public rate_id: number = 0;\n    public descrizione_rate: string = '';\n    public numero_rate: number = 0;\n    public durata: number = 0;\n    public data_inizio: number = 0;\n    public importo_iniziale: number = 0;\n    public tasso_fisso: number = 0;\n}","export class AffittoDettaglio {\n    public proprieta_affitto_id: number = 0;\n    public tipo_affittuario_id: number = 0;\n    public descrizione_affittuario: string = '';\n    public spese_condominiali: boolean = false;\n    public importo_spese_condominiali: number = 0;\n    public cedolare_secca: boolean = false;\n    public aliquota_cedolare: number = 0;\n    public prima_scadenza_anni: number = 0;\n    public data_inizio: number = 0;\n    public importo_mensile: number = 0;\n}","import { WsToken } from './../../models/login/wsToken';\nimport { Injectable } from '@angular/core';\nimport { StoreService } from '../store/store.service';\nimport { ImmobiliService } from '../immobili/immobili.service';\n\nimport { Cliente } from '../../models/clienti/cliente';\nimport { Immobile } from '../../models/immobili/immobile';\nimport { Subject } from 'rxjs';\nimport { ImmobileDettaglio } from '../../models/immobili/immobileDettaglio';\nimport { Connection } from '../../models/common/connection';\nimport { DatiCatastaliDettaglio } from '../../models/immobili/datiCatastaliDettaglio';\nimport { OmiDettaglio } from '../../models/immobili/omiDettaglio';\nimport { SpesaDettaglio } from '../../models/immobili/spesaDettaglio';\nimport { MutuoDettaglio } from '../../models/immobili/mutuoDettaglio';\nimport { AffittoDettaglio } from '../../models/immobili/affittoDettaglio';\nimport { TassaDettaglio } from '../../models/immobili/tassaDettaglio';\nimport { CointestatarioDettaglio } from '../../models/immobili/cointestatarioDettaglio';\n\n@Injectable()\nexport class SessionService {\n\n    public cliente: Cliente;\n    public immobiliCliente: Array<Immobile>;\n    public immobile: ImmobileDettaglio;\n    private elencoImmobiliSubject: Subject<boolean> = new Subject<boolean>();\n    public elencoImmobiliObs = this.elencoImmobiliSubject.asObservable();\n    private userData: WsToken;\n\n    private clientData: Cliente;\n\n    private connection: Connection;\n\n    private userDataSubject: Subject<boolean> = new Subject<boolean>();\n    public userDataObservable = this.userDataSubject.asObservable();\n\n    private intestazionePagina: string;\n    private paginaPrecedente: string;\n\n    constructor(\n        private storeService: StoreService,\n        private immobiliService: ImmobiliService\n    ) {\n        this.userData = new WsToken();\n        this.clientData = new Cliente();\n        this.connection = new Connection();\n        this.cliente = new Cliente();\n        this.immobiliCliente = new Array<Immobile>();\n        this.immobile = new ImmobileDettaglio();\n        this.immobile.dati_catastali = new DatiCatastaliDettaglio();\n        this.immobile.spese = new Array<SpesaDettaglio>();\n        this.immobile.omi = new OmiDettaglio();\n        this.immobile.mutuo_dettaglio = new MutuoDettaglio();\n        this.immobile.affitto_dettaglio = new AffittoDettaglio();\n        this.immobile.tasse = new Array<TassaDettaglio>();\n        this.immobile.cointestatari = new Array<CointestatarioDettaglio>();\n        this.intestazionePagina = 'Readvice';\n        this.paginaPrecedente = 'home';\n    }\n\n    public setPaginaPrecedente(pagina: string): void {\n        this.paginaPrecedente = pagina;\n    }\n\n    public getPaginaPrecedente(): string {\n        return this.paginaPrecedente;\n    }\n\n    public setIntestazionePagina(intestazione: string): void {\n        this.intestazionePagina = intestazione;\n    }\n\n    public getIntestazionePagina(): string {\n        return this.intestazionePagina;\n    }\n\n    public setCliente(cliente: Cliente): void {\n        this.cliente = cliente;\n        this.caricaImmobili(this.cliente.cliente_id + '');\n    }\n\n    public caricaImmobili(idCliente: string): void {\n        this.immobiliService.getImmobili(idCliente).subscribe(r => {\n            if (r.Success) {\n                this.immobiliCliente = r.Data.elenco_immobili;\n                console.log('caricati gli immobili del cliente: ' + this.immobiliCliente.length);\n                // sveglia chi Ã¨ in ascolto\n                this.elencoImmobiliSubject.next(true);\n            }\n        });\n    }\n\n    public clearUserData(): void {\n        this.storeService.clearUserData();\n        this.cliente = new Cliente();\n        this.userData = new WsToken();\n    }\n\n    public setUserData(userData: WsToken): number {\n        this.userData = userData;\n        if (userData != null) {\n            this.storeService.setUserData(userData);\n            if (userData.cliente !== undefined && userData.cliente !== null) {\n                this.setCliente(userData.cliente);\n            }\n        } else {\n            return -1;\n        }\n        return 1;\n    }\n\n    public setClientData(client: Cliente): number {\n        this.clientData = client;\n        if (client != null) {\n            this.storeService.setClientData(client);\n        } else {\n            return -1;\n        }\n        return 1;\n    }\n\n    public getUserData(): WsToken {\n        return this.userData;\n    }\n\n    public existsSessionData(): boolean {\n        return (this.userData !== null && this.userData !== undefined && JSON.stringify(this.userData) !== '{}' && this.userData.token_value !== '');\n    }\n\n    public loadUserData(): void {\n        if (this.userData !== null && this.userData !== undefined && JSON.stringify(this.userData) !== '{}' && this.userData.token_value !== '') {\n            this.userDataSubject.next(true);\n        } else {\n            this.storeService.getUserDataPromise().then((val: WsToken) => {\n                if (val == null) {\n                    this.userDataSubject.next(false);\n                } else {\n                    this.userData = val;\n                    this.userDataSubject.next(true);\n                }\n            });\n        }\n    }\n\n    public getCliente(): Cliente {\n        return this.cliente;\n    }\n\n    public clearCliente(): void {\n        this.cliente = new Cliente();\n        this.immobiliCliente = new Array<Immobile>();\n    }\n\n    public getImmobiliCliente(): Array<Immobile> {\n        return this.immobiliCliente;\n    }\n\n    public setImmobileDettaglio(immobileDettaglio: ImmobileDettaglio): void {\n        this.immobile = immobileDettaglio;\n    }\n\n    public getImmobileDettaglio(): ImmobileDettaglio {\n        return this.immobile;\n    }\n\n    public clearImmobileDettaglio(): void {\n        this.immobile = null;\n    }\n\n    public setConnection(conn: Connection): void {\n        this.connection = conn;\n    }\n\n    public getConnection(): Connection {\n        return this.connection;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { SessionService } from './session.service';\nimport { Router } from '@angular/router';\n// import { Platform, MenuController, Nav, NavController, AlertController, ToastController } from 'ionic-angular';\n\n\n@Injectable()\nexport class AlertService {\n\n    constructor(private alertController: AlertController,\n        private sessionService: SessionService,\n        public router: Router) {\n    }\n\n    public async presentAlert(alertMessage: string) {\n        const alert = this.alertController.create({\n            header: 'Conferma',\n            message: alertMessage,\n            buttons: ['OK']\n        });\n        alert.then((_alert: any) => {\n            _alert.present();\n        });\n    }\n\n    public async presentErrorAlert(alertMessage: string) {\n        const alert = this.alertController.create({\n            header: 'Errore',\n            message: alertMessage,\n            buttons: ['CHIUDI']\n        });\n        alert.then((_alert: any) => {\n            _alert.present();\n        });\n    }\n\n    public async presentAlertLogout() {\n        const alert = this.alertController.create({\n            header: 'Logout',\n            message: 'Sicuro di voler uscire?',\n            buttons: [\n                {\n                    text: 'Cancel',\n                    role: 'cancel',\n                    cssClass: 'secondary',\n                    handler: (blah) => {\n                        console.log('Confirm Cancel: blah');\n                    }\n                }, {\n                    text: 'Si',\n                    handler: () => {\n                        this.sessionService.clearUserData();\n                        this.router.navigate(['login']);\n                    }\n                }\n            ]\n        });\n        alert.then((_alert: any) => {\n            _alert.present();\n        });\n    }\n\n}\n","import { LogErroriService } from '../../services/log-errori/log-errori.service';\nimport { Injectable, ErrorHandler, Injector, NgZone } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { WsLogErrore } from '../../models/common/wslogerrore';\nimport { AlertService } from '../../services/common/alert.service';\nimport { SessionService } from '../../services/common/session.service';\n\n@Injectable()\nexport class ErrorHandlerService implements ErrorHandler {\n\n    constructor(\n        private injector: Injector,\n        private zone: NgZone,\n        private logErroriService: LogErroriService,\n        private alertService: AlertService,\n        private sessionService: SessionService) { }\n\n    handleError(error: Error | HttpErrorResponse) {\n        const token = this.sessionService.getUserData().token_value;\n\n        console.log('gestisco un errore');\n        const errore = new WsLogErrore();\n        errore.token = token;\n        errore.log_stacktrace = JSON.stringify(error);\n        errore.log_descrerr = error.message;\n        errore.log_metodoerr = '';\n        errore.log_link = '';\n        errore.log_query = '';\n        errore.username = '';\n        // console.log('trasmetto l\\'errore');\n        this.logErroriService.postErrore(errore).subscribe(r => {\n            console.log('errore trasmesso: ' + errore);\n            this.alertService.presentErrorAlert('Errore ' + error.message + ' trasmesso al server');\n        });\n        console.log('gestione errore completata');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { InserimentoClienteRequest } from '../../models/clienti/inserimentoClienteRequest';\nimport { AbilitaAppClienteRequest } from '../../models/clienti/abilitaAppClienteRequest';\n\n/**\n * Classe che raduna tutti i servizi riconducibili all'entitÃ  cliente\n *\n * @export\n * ClientiService\n */\n@Injectable()\nexport class ClientiService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per ottenere l'elenco dei clienti completo.\n     *\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns contenente l'oggetto Data che a sua volta contiene l'elenco degli oggetti Cliente\n     */\n    public getClienti(): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getClientiServiceName);\n    }\n\n    /**\n     * Chiamata per ottenere il singolo cliente passando il suo id come parametro\n     *\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns contenente l'oggetto Data che a sua volta contiene l'elenco degli oggetti Cliente\n     */\n    public getCliente(idcliente: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getClienteServiceName + this.constants.pathSeparator + idcliente);\n    }\n\n    /**\n     * Chiamata per inserire un nuovo cliente\n     *\n     * @param  cliente\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data dentro al quale si trova l'id dell'oggetto appena generato\n     */\n    public putCliente(cliente: InserimentoClienteRequest): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.putClientiServiceName, cliente);\n    }\n\n    /**\n     * Chiamata per abilitare l'app di uno specifico cliente\n     *\n     * @param  request oggetto contenente i parametri per l'abilitazione\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages.\n     */\n    public abilitaAppCliente(request: AbilitaAppClienteRequest): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.abilitaAppClienteServiceName, request);\n    }\n\n    /**\n     * Chiamata per ottenere il BookValue di un cliente\n     *\n     * @param  cliente_id identificativo unico del cliente del quale si vuole il BookValue\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data che a sua volta contiene l'elenco degli oggetti BookValue\n     */\n    public getBookValue(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.bookValueServiceName + this.constants.pathSeparator + cliente_id);\n    }\n\n    /**\n     * Chiamata per ottenere il piano di ammortamento di un mutuo\n     *\n     * @param  mutuo_id identificativo unico del mutuo del quale si vuole il PianoAmmortamento\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns response contenente l'esito in Success e ErrorMessages. Contenente l'oggetto \n     * Data che a sua volta contiene l'elenco degli oggetti PianoAmmortamento\n     */\n    public getPianoAmmortamento(mutuo_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.pianoAmmortamentoServiceName + this.constants.pathSeparator + mutuo_id);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { DdlItem } from '../../models/common/ddlitem';\n\n@Injectable()\nexport class DropdownService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    public getTipologieTasse(primacasa: boolean, residente: boolean, affittata: boolean): Observable<Http.HttpResponse> {\n        return this.getDropdown(this.constants.getDdlTasse,\n            this.constants.pathSeparator + this.getBooleanAsString(primacasa)\n            + this.constants.pathSeparator + this.getBooleanAsString(residente)\n            + this.constants.pathSeparator + this.getBooleanAsString(affittata));\n    }\n\n    public getTipiAffittuari(): Observable<Http.HttpResponse> {\n        return this.getDropdown(this.constants.getDdlAffittuari, '');\n    }\n\n    public getEuribor(): Observable<Http.HttpResponse> {\n        return this.getDropdown(this.constants.getDdlEuribor, '');\n    }\n\n    public getTipiOmi(idComuneIstat: string): Observable<Http.HttpResponse> {\n        return this.getDropdown(this.constants.getDdlOmi, this.constants.pathSeparator + idComuneIstat);\n    }\n\n    public getTipologieCatastali(): Observable<Http.HttpResponse> {\n        return this.getDropdown(this.constants.getDdlTipologiaCatastale, '');\n    }\n\n    public getComuni(nomeComune: string): Observable<Http.HttpResponse> {\n        return this.getDropdown(this.constants.getDdlComuni, this.constants.pathSeparator + nomeComune);\n    }\n\n    public getDropdown(Tipoddl: string, Filtro: string): Observable<Http.HttpResponse> {\n        const path = Tipoddl + Filtro;\n        return this.httpService.get(path);\n    }\n\n    private getBooleanAsString(input: boolean): string {\n        return (input ? 'true' : 'false');\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { ConstantsService } from '../common/constants.service';\n\n@Injectable()\nexport class IconeService {\n\n    private tipologiaVilla: Array<string> = [\n        \"A/1\",\n        \"A/7\",\n        \"A/8\",\n        \"A/9\"\n    ];\n    private tipologiaCasa: Array<string> = [\n        \"A/2\",\n        \"A/3\",\n        \"A/4\",\n        \"A/5\",\n        \"A/11\"\n    ];\n    private tipologiaAgricolo: Array<string> = [\n        \"A/6\",\n        \"D/10\"\n    ];\n    private tipologiaTerreno: Array<string> = [\n        \"T/1\"\n    ];\n    private tipologiaUfficio: Array<string> = [\n        \"A/10\",\n        \"C/3\",\n        \"E/3\",\n        \"E/4\",\n        \"E/6\",\n        \"E/8\",\n        \"E/9\",\n        \"F/1\",\n        \"F/2\"\n    ];\n    private tipologiaAlbergo: Array<string> = [\n        \"B/1\",\n        \"B/3\",\n        \"C/5\",\n        \"D/2\"\n    ];\n    private tipologiaOspedale: Array<string> = [\n        \"B/2\",\n        \"D/4\"\n    ];\n    private tipologiaScuola: Array<string> = [\n        \"B/5\"\n    ];\n    private tipologiaMuseo: Array<string> = [\n        \"B/6\"\n    ];\n    private tipologiaChiesa: Array<string> = [\n        \"B/7\",\n        \"E/7\"\n    ];\n    private tipologiaMagazzino: Array<string> = [\n        \"B/8\",\n        \"C/2\",\n        \"E/5\",\n        \"F/5\"\n    ];\n    private tipologiaNegozio: Array<string> = [\n        \"C/1\",\n        \"D/8\"\n    ];\n    private tipologiaSport: Array<string> = [\n        \"C/4\",\n        \"D/6\"\n    ];\n    private tipologiaGarage: Array<string> = [\n        \"C/6\",\n        \"C/7\"\n    ];\n    private tipologiaFabbrica: Array<string> = [\n        \"D/1\",\n        \"D/7\"\n    ];\n    private tipologiaTeatro: Array<string> = [\n        \"D/3\"\n    ];\n    private tipologiaBanca: Array<string> = [\n        \"D/5\"\n    ];\n    private tipologiaPonte: Array<string> = [\n        \"D/9\",\n        \"E/2\"\n    ];\n    private tipologiaStazione: Array<string> = [\n        \"E/1\"\n    ];\n    private tipologiaCantiere: Array<string> = [\n        \"F/3\",\n        \"F/4\",\n        \"F/6\"\n    ];\n\n    constructor(private constants: ConstantsService) { }\n\n    public getClasseIcona(tipologia: string): string {\n        if (this.tipologiaTerreno.includes(tipologia)) {\n            return this.constants.tipologiaImmobileTerreno;\n        }\n        if (this.tipologiaAgricolo.includes(tipologia)) {\n            return this.constants.tipologiaImmobileAgricolo;\n        }\n        if (this.tipologiaAlbergo.includes(tipologia)) {\n            return this.constants.tipologiaImmobileAlbergo;\n        }\n        if (this.tipologiaBanca.includes(tipologia)) {\n            return this.constants.tipologiaImmobileBanca;\n        }\n        if (this.tipologiaCantiere.includes(tipologia)) {\n            return this.constants.tipologiaImmobileCantiere;\n        }\n        if (this.tipologiaCasa.includes(tipologia)) {\n            return this.constants.tipologiaImmobileCasa;\n        }\n        if (this.tipologiaChiesa.includes(tipologia)) {\n            return this.constants.tipologiaImmobileChiesa;\n        }\n        if (this.tipologiaFabbrica.includes(tipologia)) {\n            return this.constants.tipologiaImmobileFabbrica;\n        }\n        if (this.tipologiaGarage.includes(tipologia)) {\n            return this.constants.tipologiaImmobileGarage;\n        }\n        if (this.tipologiaMagazzino.includes(tipologia)) {\n            return this.constants.tipologiaImmobileMagazzino;\n        }\n        if (this.tipologiaMuseo.includes(tipologia)) {\n            return this.constants.tipologiaImmobileMuseo;\n        }\n        if (this.tipologiaNegozio.includes(tipologia)) {\n            return this.constants.tipologiaImmobileNegozio;\n        }\n        if (this.tipologiaOspedale.includes(tipologia)) {\n            return this.constants.tipologiaImmobileOspedale;\n        }\n        if (this.tipologiaPonte.includes(tipologia)) {\n            return this.constants.tipologiaImmobilePonte;\n        }\n        if (this.tipologiaScuola.includes(tipologia)) {\n            return this.constants.tipologiaImmobileScuola;\n        }\n        if (this.tipologiaSport.includes(tipologia)) {\n            return this.constants.tipologiaImmobileSport;\n        }\n        if (this.tipologiaStazione.includes(tipologia)) {\n            return this.constants.tipologiaImmobileStazione;\n        }\n        if (this.tipologiaTeatro.includes(tipologia)) {\n            return this.constants.tipologiaImmobileTeatro;\n        }\n        if (this.tipologiaUfficio.includes(tipologia)) {\n            return this.constants.tipologiaImmobileUfficio;\n        }\n        if (this.tipologiaVilla.includes(tipologia)) {\n            return this.constants.tipologiaImmobileVilla;\n        }\n        return this.constants.tipologiaImmobileCasa;\n    }\n}\n","import { ErrorHandlerService } from './handler/error/error-handler.service';\nimport { LogErroriService } from './services/log-errori/log-errori.service';\nimport { NgModule } from '@angular/core';\n\nimport { Storage } from '@ionic/Storage';\nimport { IonicStorageModule } from '@ionic/Storage';\n\nimport { ConstantsService } from './services/common/constants.service';\nimport { BrokerHttpService } from './services/common/brokerhttp.service';\nimport { ImmobiliService } from './services/immobili/immobili.service';\nimport { ClientiService } from './services/clienti/clienti.service';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { DropdownService } from './services/dropdown/dropdown.service';\nimport { IconeService } from './services/icone/icone.service';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    HttpClientModule,\n    IonicStorageModule.forRoot()\n  ],\n  providers: [\n    ConstantsService,\n    BrokerHttpService,\n    ImmobiliService,\n    ClientiService,\n    DropdownService,\n    LogErroriService,\n    ErrorHandlerService,\n    IconeService\n  ],\n  exports: [\n  ]\n})\nexport class BrokerLibModule {\n  static forRoot() {\n    return {\n      ngModule: BrokerLibModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Http } from '../../models/common/http.namespace';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\n\n/**\n * Classe che raggruppa i servizi relativi ai Report\n *\n * @export\n * ReportService\n */\n@Injectable()\nexport class ReportService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) { }\n\n    /**\n     * Chiamata per ottenere il report della situazione generale di un cliente\n     *\n     * @param cliente_id\n     * @param tokenValue Token di autenticazione ottenuto dalla login\n     * @returns\n     */\n    public getSituazioneGenerale(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.situazioneGeneraleServiceName + this.constants.pathSeparator + cliente_id);\n    }\n\n    /**\n     * Chiamata per ottenere i dati che vanno a popolare i grafici\n     *\n     * @param  cliente_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns\n     */\n    public getGrafici(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.graficiServiceName + this.constants.pathSeparator + cliente_id);\n    }\n\n    /**\n     * Chiamata per scatenare l'invio del report generale in formato PDF al cliente passandolo in una mail\n     *\n     * @param  cliente_id\n     * @param  tokenValue Token di autenticazione ottenuto dalla login\n     * @returns\n     */\n    public getPdfReport(cliente_id: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.pdfReportServiceName + this.constants.pathSeparator + cliente_id);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BrokerHttpService } from '../common/brokerhttp.service';\nimport { ConstantsService } from '../common/constants.service';\nimport { Observable } from 'rxjs';\nimport { Http } from '../../models/common/http.namespace';\nimport { Cartella } from '../../models/documenti/cartella';\nimport { Documento } from '../../models/documenti/documento';\n\n@Injectable()\nexport class DocumentiService {\n\n    constructor(\n        private httpService: BrokerHttpService,\n        private constants: ConstantsService) {\n    }\n\n    public getCartelle(idcliente: number, idcartella: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getCartelle\n            + this.constants.pathSeparator + idcliente\n            + this.constants.pathSeparator + idcartella);\n    }\n\n    public getDocumento(iddocumento: number): Observable<Http.HttpResponse> {\n        return this.httpService.get(this.constants.getDocumento\n            + this.constants.pathSeparator + iddocumento);\n    }\n\n    public putCartelle(cartella: Cartella): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.putCartelle, cartella);\n    }\n\n    public putDocumento(documento: Documento): Observable<Http.HttpResponse> {\n        return this.httpService.post(this.constants.putDocumento, documento);\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { Http } from \"../../models/common/http.namespace\";\nimport { LoginRequest } from \"../../models/login/loginRequest\";\nimport { CambioPasswordRequest } from \"../../models/login/cambioPasswordRequest\";\n\nimport { BrokerHttpService } from \"../common/brokerhttp.service\";\nimport { WsToken } from '../../models/login/wsToken';\nimport { StoreService } from '../store/store.service';\nimport { ConstantsService } from '../common/constants.service';\n\n@Injectable()\nexport class LoginService {\n    constructor(\n        private httpService: BrokerHttpService,\n        private storeService: StoreService,\n        private constants: ConstantsService) {\n    }\n\n    public CambioPassword(bodyCambio: CambioPasswordRequest) {\n        return this.httpService.post(this.constants.cambioPasswordServiceName, bodyCambio);\n    }\n\n    public Login(body: LoginRequest): Observable<Http.HttpResponse> {\n        // eseguo la post\n        return this.httpService.postNoToken(this.constants.loginServiceName, body);\n    }\n\n    // public Login(body: LoginRequest): Observable<Http.HttpResponse> { // momentaneamente in get per usare il servizio finto di test\n    //     // eseguo la post\n    //     return this.httpService.getNoToken(this.constants.loginServiceName);\n    // }\n\n    /*\n    QUESTA Ã¨ LA LOGICA DA METTERE SUL CHIAMANTE DELLA LOGIN\n    .subscribe(r => {\n\n            let response = new WsToken();\n            if (r.Success) {\n                response = r.Data;\n                this.storeService.setUserData(response); // eventuale controllo su esito salvataggio in sessione\n            } else {\n                let errorMessage = r.ErrorMessage;\n\n                // invio al server dell'errore\n\n                // popup errore\n            }\n\n        });\n    } */\n}\n","import { GraficiAndamentoAnnuale } from './graficiAndamentoAnnuale';\nimport { GraficiIndicatore } from './graficiIndicatore';\nimport { GraficiConcentrazione } from './graficiConcentrazione';\nimport { GraficiAffittuario } from './graficiAffittuario';\n\nexport class Grafici {\n    public andamento_annuale: Array<GraficiAndamentoAnnuale>;\n    public indicatori: Array<GraficiIndicatore>;\n    public concentrazione: Array<GraficiConcentrazione>;\n    public affittuari: Array<GraficiAffittuario>;\n}\n","export class GraficiAffittuario {\n    public descrizione_affittuario: string;\n    public percentuale: number;\n}\n","export class GraficiAndamentoAnnuale {\n    public anno: number;\n    public attivo: number;\n    public passivo: number;\n}\n","export class GraficiConcentrazione {\n    public codice_catastale: string;\n    public percentuale: number;\n}\n","export class GraficiIndicatore {\n    public descrizione_indicatore: string;\n    public percentuale: number;\n}\n","import { ReportGeneraleAttivo } from './reportGeneraleAttivo';\nimport { ReportGeneralePassivo } from './reportGeneralePassivo';\nimport { ReportGeneraleInteressi } from './reportGeneraleInteressi';\n\nexport class ReportGenerale {\n    public proprieta_id: number;\n    public codice_tipologia: string;\n    public descrizione_tipologia: string;\n    public valore_acquisto: number;\n    public quota: number;\n    public indirizzo: string;\n    public civico: string;\n    public citta: string;\n    public cap: string;\n    public provincia: string;\n    public prima_casa: string;\n    public passivi: Array<ReportGeneralePassivo>;\n    public attivo: ReportGeneraleAttivo;\n    public detrazione_interessi_attivo: ReportGeneraleInteressi;\n}\n","export class ReportGeneraleAttivo {\n    public descrizione_affittuario: string;\n    public cedolare_secca: string;\n    public aliquota_cedolare: number;\n    public prima_scadenza_anni: number;\n    public data_inizio: number;\n    public importo_mensile: number;\n\n}\n","export class ReportGeneralePassivo {\n    public descrizione_passivo: string;\n    public importo_annuale: string;\n}\n","export class ReportGeneraleOggettoColonna {\n    public descrizione: string;\n    public valore: string;\n}\n","export class AbilitaAppClienteRequest {\n    public cliente_id: number;\n    public password: string;\n}","export class BookValue {\n    public gruppo_catastale: string;\n    public codice_catastale: string;\n    public descrizione_tipologia: string;\n    public book_value: number;\n    public numero_proprieta: number;\n}","export class InserimentoClienteRequest {\n    public cliente_id: number;\n    public promotore_id: number;\n    public nome: string;\n    public cognome: string;\n    public codice_fiscale: string;\n    public email: string;\n}\n","export class InserimentoClienteResponse {\n    public return_id: number;\n}\n","// tslint:disable-next-line: no-namespace\nexport class Immobile {\n    public cliente_id: number;\n    public proprieta_id: number;\n    public indirizzo: string;\n    public civico: string;\n    public email: string;\n    public citta: string;\n    public cap: string;\n    public provincia: string;\n    public prima_casa: string;\n    public valore_acquisto: number;\n    public quota: number;\n    public data_aggiornamento: number;\n    public codice_tipologia: string;\n}\n\n\n","import { NumberSymbol } from '@angular/common';\n\nexport class CancellazioneImmobileRequest {\n    public immobile_id: number;\n}\n","export class CointestatarioDettaglio {\n    public proprieta_possesso_id: number = 0;\n    public nominativo: string = '';\n    public codice_fiscale: string = '';\n    public quota: number = 0;\n}","import { ImmobileDettaglio } from './immobileDettaglio';\n\nexport class ImmobileDettaglioVM extends ImmobileDettaglio {\n    public tasse_totale: number;\n}\n","export class InserimentoImmobileResponse {\n    public return_id: number;\n}\n","export class SpesaDettaglio {\n    public proprieta_spese_id: number = 0;\n    public spesa_id: number;\n    public descrizione_spesa: string = '';\n    public importo_annuale: number = 0;\n}","export class TassaDettaglio {\n    public proprieta_tasse_id: number = 0;\n    public tassa_id: number;\n    public descrizione_tassa: string = '';\n    public importo_annuale: number = 0;\n}","export class PianoAmmortamento {\n    public indice: number;\n    public anno: number;\n    public importo_rata: number;\n    public quota_interessi: number;\n    public quota_capitale: number;\n    public interessi_residui: number;\n    public capitale_residuo: number;\n}","import { PianoAmmortamento } from './pianoAmmortamento';\n\nexport class AnnoPianoAmmortamento {\n    public anno: number;\n    public piano_lista: Array<PianoAmmortamento>;\n}","export class Cartella {\n    public doc_cartella_id: number;\n    public cartella_desc: number;\n    public doc_cartella_padre_id: number;\n    public cliente_id: number;\n}","export class Documento {\n    public doc_file_id: number;\n    public nome_file: number;\n    public descrizione: string;\n    public file: string;\n    public note: string;\n}","export class LoginRequest {\n    public username: string;\n    public password: string;\n    public id_phone: string;\n    public app_chiamante: string;\n}\n","export class Utente {\n    public utente_id: number;\n    public nome: string;\n    public cognome: string;\n    public codice_fiscale: string;\n    public email: string;\n}\n","export class CambioPasswordRequest {\n    public vecchia_password: string;\n    public nuova_password: string;\n    public ripeti_password: string;\n}\n","export class ErrorMessage {\n    public msg_tipo: string;\n    public msg_code: number;\n    public msg_testo: string;\n    public msg_method: string;\n    public msg_techdata: string;\n}","export class DdlItem {\n    public codice: string;\n    public descrizione: string;\n}\n","export class DdlItemSearch {\n    public id: string;\n    public description: string;\n}\n"]}